
GameBoyCartridgeReader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002300  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800100  00800100  00002300  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000623f  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012e9  00000000  00000000  000087c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017aa  00000000  00000000  00009aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000830  00000000  00000000  0000b258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004be  00000000  00000000  0000ba88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000317f  00000000  00000000  0000bf46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  0000f0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000021ca  000021ca  0000227e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000f290  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.gbCartridge_init 000000b0  0000170e  0000170e  000017c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.gbCartridge_write 00000310  000009d0  000009d0  00000a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.gbCartridge_read 000003b6  0000061a  0000061a  000006ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.gbCartridge_readBlob 00000090  000018f6  000018f6  000019aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 000000c4  000000de  000000de  00000192  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.gbCartridge_isPressent 0000009a  0000185c  0000185c  00001910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.gbCartridge_isChecksumValid 00000070  00001af2  00001af2  00001ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.gbCartridge_getRomInfo 000002ec  00000ce0  00000ce0  00000d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.gbCartridge_switchRomBank 00000024  00002160  00002160  00002214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data.nintendoLogo 00000030  000001a2  000001a2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.cfgPort 00000082  00001986  00001986  00001a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.getRegsFromGpioId 00000066  00001bce  00001bce  00001c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._gpio_arduino_init 00000046  00001df0  00001df0  00001ea4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._gpio_arduino_readPin 0000005a  00001c94  00001c94  00001d48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._gpio_arduino_readU8 00000042  00001e7c  00001e7c  00001f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._gpio_arduino_writePin 00000072  00001a80  00001a80  00001b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._gpio_arduino_writeU8 0000003a  00001efc  00001efc  00001fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .data.gpio_arduino 0000000e  008003c4  000021e8  0000229c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .data.A5      00000004  008003e0  00002204  000022b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .data.A4      00000004  008003e4  00002208  000022bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .data.A3      00000004  008003e8  0000220c  000022c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .data.A2      00000004  008003ec  00002210  000022c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .data.A1      00000004  008003f0  00002214  000022c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .data.A0      00000004  008003f4  00002218  000022cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .data.D13     00000004  008003f8  0000221c  000022d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 39 .data.D12     00000004  008003fc  00002220  000022d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 40 .data.D11     00000004  00800400  00002224  000022d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 41 .data.D10     00000004  00800404  00002228  000022dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .data.D9      00000004  00800408  0000222c  000022e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 43 .data.D8      00000004  0080040c  00002230  000022e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .data.D7      00000004  00800410  00002234  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 45 .data.D6      00000004  00800414  00002238  000022ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 46 .data.D5      00000004  00800418  0000223c  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 47 .data.D4      00000004  0080041c  00002240  000022f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 48 .data.D3      00000004  00800420  00002244  000022f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .data.D2      00000004  00800424  00002248  000022fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 50 .text.newInstance 0000003e  00001ebe  00001ebe  00001f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text._gpio_hcf4099be_writeU8 0000011a  00001432  00001432  000014e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.hcf4099be_create 000001f2  00000fcc  00000fcc  00001080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .bss.hcf4099be_handles 0000001a  00800390  00800390  00002300  2**0
                  ALLOC
 54 .data.gpio_hcf4099be 0000000e  008003d2  000021f6  000022aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 55 .text.gpioInit 0000002e  000020ae  000020ae  00002162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.gpioReadPin 0000002e  000020dc  000020dc  00002190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.gpioWritePin 00000034  0000204a  0000204a  000020fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.gpioWriteU8 0000001c  00002184  00002184  00002238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.main    00000122  00001310  00001310  000013c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .data.slot    0000001a  008003aa  000021ce  00002282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .text.__vector_18 0000005a  00001cee  00001cee  00001da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.__vector_19 00000054  00001d48  00001d48  00001dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart_init 00000036  00001fa8  00001fa8  0000205c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart_getc 0000003a  00001f36  00001f36  00001fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart_putc 0000002a  00002136  00002136  000021ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart_puts 0000002c  0000210a  0000210a  000021be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart_putb 0000006c  00001b62  00001b62  00001c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .bss.UART_LastRxError 00000001  00800428  00800428  00002300  2**0
                  ALLOC
 69 .bss.UART_RxTail 00000001  00800429  00800429  00002300  2**0
                  ALLOC
 70 .bss.UART_RxHead 00000001  0080042a  0080042a  00002300  2**0
                  ALLOC
 71 .bss.UART_TxTail 00000001  0080042b  0080042b  00002300  2**0
                  ALLOC
 72 .bss.UART_TxHead 00000001  0080042c  0080042c  00002300  2**0
                  ALLOC
 73 .bss.UART_RxBuf 00000200  00800170  00800170  00002300  2**0
                  ALLOC
 74 .bss.UART_TxBuf 00000020  00800370  00800370  00002300  2**0
                  ALLOC
 75 .text.xcom_readRomBank 0000009e  000017be  000017be  00001872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.xcom_cartridge_detect 00000030  0000207e  0000207e  00002132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.xcom_do_cartridgeAction 00000106  0000154c  0000154c  00001600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.xtransfer_transmitHeader 00000060  00001c34  00001c34  00001ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.xtransfer_transmitData 0000000e  000021b0  000021b0  00002264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.xtransfer_receiveHeader 00000152  000011be  000011be  00001272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc  0000000c  000021be  000021be  00002272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.libgcc  00000010  000021a0  000021a0  00002254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.avrlibc 00000054  00001d9c  00001d9c  00001e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.avrlibc 00000046  00001e36  00001e36  00001eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.avrlibc 00000448  000001d2  000001d2  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.avrlibc 00000036  00001fde  00001fde  00002092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.avrlibc 00000078  00001a08  00001a08  00001abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.avrlibc 000000bc  00001652  00001652  00001706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.libgcc.prologue 00000038  00001f70  00001f70  00002024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc.prologue 00000036  00002014  00002014  000020c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
   8:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
   c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  10:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  14:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  18:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  1c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  20:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  24:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  28:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  2c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  30:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  34:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  38:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  3c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  40:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  44:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  48:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_18>
  4c:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__vector_19>
  50:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  54:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  58:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  5c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  60:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  64:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__bad_interrupt>
  68:	d8 06       	cpc	r13, r24
  6a:	de 06       	cpc	r13, r30
  6c:	e6 06       	cpc	r14, r22
  6e:	ec 06       	cpc	r14, r28
  70:	f4 06       	cpc	r15, r20
  72:	fa 06       	cpc	r15, r26
  74:	02 07       	cpc	r16, r18
  76:	08 07       	cpc	r16, r24

00000078 <.dinit>:
  78:	01 00       	.word	0x0001	; ????
  7a:	03 aa       	std	Z+51, r0	; 0x33
  7c:	80 03       	fmuls	r16, r16
  7e:	aa 04       	cpc	r10, r10
  80:	28 00       	.word	0x0028	; ????
  82:	21 ce       	rjmp	.-958    	; 0xfffffcc6 <__eeprom_end+0xff7efcc6>
  84:	04 28       	or	r0, r4
  86:	04 2d       	mov	r16, r4
  88:	80 00       	.word	0x0080	; ????

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	e8 e7       	ldi	r30, 0x78	; 120
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	17 c0       	rjmp	.+46     	; 0xcc <__do_clear_bss+0x8>
  9e:	b5 91       	lpm	r27, Z+
  a0:	a5 91       	lpm	r26, Z+
  a2:	35 91       	lpm	r19, Z+
  a4:	25 91       	lpm	r18, Z+
  a6:	05 91       	lpm	r16, Z+
  a8:	07 fd       	sbrc	r16, 7
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <__do_clear_bss>
  ac:	95 91       	lpm	r25, Z+
  ae:	85 91       	lpm	r24, Z+
  b0:	ef 01       	movw	r28, r30
  b2:	f9 2f       	mov	r31, r25
  b4:	e8 2f       	mov	r30, r24
  b6:	05 90       	lpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a2 17       	cp	r26, r18
  bc:	b3 07       	cpc	r27, r19
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x20>
  c0:	fe 01       	movw	r30, r28
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__do_clear_bss+0x8>

000000c4 <__do_clear_bss>:
  c4:	1d 92       	st	X+, r1
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	e1 f7       	brne	.-8      	; 0xc4 <__do_clear_bss>
  cc:	e9 38       	cpi	r30, 0x89	; 137
  ce:	f4 07       	cpc	r31, r20
  d0:	31 f7       	brne	.-52     	; 0x9e <__do_copy_data+0x8>
  d2:	0e 94 88 09 	call	0x1310	; 0x1310 <main>
  d6:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>

Disassembly of section .text:

000021ca <__bad_interrupt>:
    21ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.gbCartridge_init:

0000170e <gbCartridge_init>:
	sprintf(buffer, " RAM_SIZE: %d\r\n", romInfo->ramSize);
	uart_puts(buffer);
	//Print Ram Banks
	sprintf(buffer, " RAM_BANKS: %d\r\n", romInfo->ramBanks);
	uart_puts(buffer);
}
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    171e:	81 11       	cpse	r24, r1
    1720:	4b c0       	rjmp	.+150    	; 0x17b8 <gbCartridge_init+0xaa>
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	88 85       	ldd	r24, Y+8	; 0x08
    1726:	99 85       	ldd	r25, Y+9	; 0x09
    1728:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    172c:	81 11       	cpse	r24, r1
    172e:	44 c0       	rjmp	.+136    	; 0x17b8 <gbCartridge_init+0xaa>
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	8a 85       	ldd	r24, Y+10	; 0x0a
    1734:	9b 85       	ldd	r25, Y+11	; 0x0b
    1736:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    173a:	81 11       	cpse	r24, r1
    173c:	3d c0       	rjmp	.+122    	; 0x17b8 <gbCartridge_init+0xaa>
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	8c 85       	ldd	r24, Y+12	; 0x0c
    1742:	9d 85       	ldd	r25, Y+13	; 0x0d
    1744:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1748:	81 11       	cpse	r24, r1
    174a:	36 c0       	rjmp	.+108    	; 0x17b8 <gbCartridge_init+0xaa>
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1750:	9f 85       	ldd	r25, Y+15	; 0x0f
    1752:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1756:	81 11       	cpse	r24, r1
    1758:	2f c0       	rjmp	.+94     	; 0x17b8 <gbCartridge_init+0xaa>
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	88 89       	ldd	r24, Y+16	; 0x10
    175e:	99 89       	ldd	r25, Y+17	; 0x11
    1760:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1764:	81 11       	cpse	r24, r1
    1766:	28 c0       	rjmp	.+80     	; 0x17b8 <gbCartridge_init+0xaa>
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	8a 89       	ldd	r24, Y+18	; 0x12
    176c:	9b 89       	ldd	r25, Y+19	; 0x13
    176e:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1772:	81 11       	cpse	r24, r1
    1774:	21 c0       	rjmp	.+66     	; 0x17b8 <gbCartridge_init+0xaa>
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	8c 89       	ldd	r24, Y+20	; 0x14
    177a:	9d 89       	ldd	r25, Y+21	; 0x15
    177c:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1780:	81 11       	cpse	r24, r1
    1782:	1a c0       	rjmp	.+52     	; 0x17b8 <gbCartridge_init+0xaa>
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	8e 89       	ldd	r24, Y+22	; 0x16
    1788:	9f 89       	ldd	r25, Y+23	; 0x17
    178a:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    178e:	81 11       	cpse	r24, r1
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <gbCartridge_init+0xaa>
    1792:	62 e0       	ldi	r22, 0x02	; 2
    1794:	88 8d       	ldd	r24, Y+24	; 0x18
    1796:	99 8d       	ldd	r25, Y+25	; 0x19
    1798:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    179c:	81 11       	cpse	r24, r1
    179e:	0c c0       	rjmp	.+24     	; 0x17b8 <gbCartridge_init+0xaa>
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	8e 89       	ldd	r24, Y+22	; 0x16
    17a4:	9f 89       	ldd	r25, Y+23	; 0x17
    17a6:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    17aa:	81 11       	cpse	r24, r1
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <gbCartridge_init+0xaa>
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	88 8d       	ldd	r24, Y+24	; 0x18
    17b2:	99 8d       	ldd	r25, Y+25	; 0x19
    17b4:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

Disassembly of section .text.gbCartridge_write:

000009d0 <gbCartridge_write>:
 9d0:	cf 92       	push	r12
 9d2:	df 92       	push	r13
 9d4:	ef 92       	push	r14
 9d6:	1f 93       	push	r17
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	6b 01       	movw	r12, r22
 9de:	e8 2e       	mov	r14, r24
 9e0:	d4 2f       	mov	r29, r20
 9e2:	15 2f       	mov	r17, r21
 9e4:	c2 2f       	mov	r28, r18
 9e6:	a8 2f       	mov	r26, r24
 9e8:	cb 01       	movw	r24, r22
 9ea:	46 96       	adiw	r24, 0x16	; 22
 9ec:	a1 1d       	adc	r26, r1
 9ee:	fc 01       	movw	r30, r24
 9f0:	5a 2f       	mov	r21, r26
 9f2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 9f6:	cb 01       	movw	r24, r22
 9f8:	61 e0       	ldi	r22, 0x01	; 1
 9fa:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 9fe:	81 11       	cpse	r24, r1
 a00:	68 c1       	rjmp	.+720    	; 0xcd2 <gbCartridge_write+0x302>
 a02:	ae 2d       	mov	r26, r14
 a04:	c6 01       	movw	r24, r12
 a06:	48 96       	adiw	r24, 0x18	; 24
 a08:	a1 1d       	adc	r26, r1
 a0a:	fc 01       	movw	r30, r24
 a0c:	5a 2f       	mov	r21, r26
 a0e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 a12:	cb 01       	movw	r24, r22
 a14:	61 e0       	ldi	r22, 0x01	; 1
 a16:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 a1a:	81 11       	cpse	r24, r1
 a1c:	5a c1       	rjmp	.+692    	; 0xcd2 <gbCartridge_write+0x302>
 a1e:	8f e7       	ldi	r24, 0x7F	; 127
 a20:	9c e0       	ldi	r25, 0x0C	; 12
 a22:	01 97       	sbiw	r24, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <gbCartridge_write+0x52>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <gbCartridge_write+0x58>
 a28:	00 00       	nop
 a2a:	ae 2d       	mov	r26, r14
 a2c:	c6 01       	movw	r24, r12
 a2e:	02 96       	adiw	r24, 0x02	; 2
 a30:	a1 1d       	adc	r26, r1
 a32:	fc 01       	movw	r30, r24
 a34:	24 91       	lpm	r18, Z
 a36:	a7 fd       	sbrc	r26, 7
 a38:	20 81       	ld	r18, Z
 a3a:	f6 01       	movw	r30, r12
 a3c:	5e 2d       	mov	r21, r14
 a3e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 a42:	cb 01       	movw	r24, r22
 a44:	4d 2f       	mov	r20, r29
 a46:	62 2f       	mov	r22, r18
 a48:	0e 94 c2 10 	call	0x2184	; 0x2184 <gpioWriteU8>
 a4c:	81 11       	cpse	r24, r1
 a4e:	41 c1       	rjmp	.+642    	; 0xcd2 <gbCartridge_write+0x302>
 a50:	ae 2d       	mov	r26, r14
 a52:	c6 01       	movw	r24, r12
 a54:	05 96       	adiw	r24, 0x05	; 5
 a56:	a1 1d       	adc	r26, r1
 a58:	fc 01       	movw	r30, r24
 a5a:	24 91       	lpm	r18, Z
 a5c:	a7 fd       	sbrc	r26, 7
 a5e:	20 81       	ld	r18, Z
 a60:	ae 2d       	mov	r26, r14
 a62:	c6 01       	movw	r24, r12
 a64:	03 96       	adiw	r24, 0x03	; 3
 a66:	a1 1d       	adc	r26, r1
 a68:	fc 01       	movw	r30, r24
 a6a:	5a 2f       	mov	r21, r26
 a6c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 a70:	cb 01       	movw	r24, r22
 a72:	41 2f       	mov	r20, r17
 a74:	62 2f       	mov	r22, r18
 a76:	0e 94 c2 10 	call	0x2184	; 0x2184 <gpioWriteU8>
 a7a:	81 11       	cpse	r24, r1
 a7c:	2a c1       	rjmp	.+596    	; 0xcd2 <gbCartridge_write+0x302>
 a7e:	8f ee       	ldi	r24, 0xEF	; 239
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	01 97       	sbiw	r24, 0x01	; 1
 a84:	f1 f7       	brne	.-4      	; 0xa82 <gbCartridge_write+0xb2>
 a86:	00 c0       	rjmp	.+0      	; 0xa88 <gbCartridge_write+0xb8>
 a88:	00 00       	nop
 a8a:	ae 2d       	mov	r26, r14
 a8c:	c6 01       	movw	r24, r12
 a8e:	06 96       	adiw	r24, 0x06	; 6
 a90:	a1 1d       	adc	r26, r1
 a92:	fc 01       	movw	r30, r24
 a94:	5a 2f       	mov	r21, r26
 a96:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 a9a:	cb 01       	movw	r24, r22
 a9c:	62 e0       	ldi	r22, 0x02	; 2
 a9e:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 aa2:	81 11       	cpse	r24, r1
 aa4:	16 c1       	rjmp	.+556    	; 0xcd2 <gbCartridge_write+0x302>
 aa6:	ae 2d       	mov	r26, r14
 aa8:	c6 01       	movw	r24, r12
 aaa:	08 96       	adiw	r24, 0x08	; 8
 aac:	a1 1d       	adc	r26, r1
 aae:	fc 01       	movw	r30, r24
 ab0:	5a 2f       	mov	r21, r26
 ab2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 ab6:	cb 01       	movw	r24, r22
 ab8:	62 e0       	ldi	r22, 0x02	; 2
 aba:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 abe:	81 11       	cpse	r24, r1
 ac0:	08 c1       	rjmp	.+528    	; 0xcd2 <gbCartridge_write+0x302>
 ac2:	ae 2d       	mov	r26, r14
 ac4:	c6 01       	movw	r24, r12
 ac6:	0a 96       	adiw	r24, 0x0a	; 10
 ac8:	a1 1d       	adc	r26, r1
 aca:	fc 01       	movw	r30, r24
 acc:	5a 2f       	mov	r21, r26
 ace:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 ad2:	cb 01       	movw	r24, r22
 ad4:	62 e0       	ldi	r22, 0x02	; 2
 ad6:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 ada:	81 11       	cpse	r24, r1
 adc:	fa c0       	rjmp	.+500    	; 0xcd2 <gbCartridge_write+0x302>
 ade:	ae 2d       	mov	r26, r14
 ae0:	c6 01       	movw	r24, r12
 ae2:	0c 96       	adiw	r24, 0x0c	; 12
 ae4:	a1 1d       	adc	r26, r1
 ae6:	fc 01       	movw	r30, r24
 ae8:	5a 2f       	mov	r21, r26
 aea:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 aee:	cb 01       	movw	r24, r22
 af0:	62 e0       	ldi	r22, 0x02	; 2
 af2:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 af6:	81 11       	cpse	r24, r1
 af8:	ec c0       	rjmp	.+472    	; 0xcd2 <gbCartridge_write+0x302>
 afa:	ae 2d       	mov	r26, r14
 afc:	c6 01       	movw	r24, r12
 afe:	0e 96       	adiw	r24, 0x0e	; 14
 b00:	a1 1d       	adc	r26, r1
 b02:	fc 01       	movw	r30, r24
 b04:	5a 2f       	mov	r21, r26
 b06:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b0a:	cb 01       	movw	r24, r22
 b0c:	62 e0       	ldi	r22, 0x02	; 2
 b0e:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 b12:	81 11       	cpse	r24, r1
 b14:	de c0       	rjmp	.+444    	; 0xcd2 <gbCartridge_write+0x302>
 b16:	ae 2d       	mov	r26, r14
 b18:	c6 01       	movw	r24, r12
 b1a:	40 96       	adiw	r24, 0x10	; 16
 b1c:	a1 1d       	adc	r26, r1
 b1e:	fc 01       	movw	r30, r24
 b20:	5a 2f       	mov	r21, r26
 b22:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b26:	cb 01       	movw	r24, r22
 b28:	62 e0       	ldi	r22, 0x02	; 2
 b2a:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 b2e:	81 11       	cpse	r24, r1
 b30:	d0 c0       	rjmp	.+416    	; 0xcd2 <gbCartridge_write+0x302>
 b32:	ae 2d       	mov	r26, r14
 b34:	c6 01       	movw	r24, r12
 b36:	42 96       	adiw	r24, 0x12	; 18
 b38:	a1 1d       	adc	r26, r1
 b3a:	fc 01       	movw	r30, r24
 b3c:	5a 2f       	mov	r21, r26
 b3e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b42:	cb 01       	movw	r24, r22
 b44:	62 e0       	ldi	r22, 0x02	; 2
 b46:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 b4a:	81 11       	cpse	r24, r1
 b4c:	c2 c0       	rjmp	.+388    	; 0xcd2 <gbCartridge_write+0x302>
 b4e:	ae 2d       	mov	r26, r14
 b50:	c6 01       	movw	r24, r12
 b52:	44 96       	adiw	r24, 0x14	; 20
 b54:	a1 1d       	adc	r26, r1
 b56:	fc 01       	movw	r30, r24
 b58:	5a 2f       	mov	r21, r26
 b5a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b5e:	cb 01       	movw	r24, r22
 b60:	62 e0       	ldi	r22, 0x02	; 2
 b62:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 b66:	81 11       	cpse	r24, r1
 b68:	b4 c0       	rjmp	.+360    	; 0xcd2 <gbCartridge_write+0x302>
 b6a:	ae 2d       	mov	r26, r14
 b6c:	c6 01       	movw	r24, r12
 b6e:	06 96       	adiw	r24, 0x06	; 6
 b70:	a1 1d       	adc	r26, r1
 b72:	fc 01       	movw	r30, r24
 b74:	5a 2f       	mov	r21, r26
 b76:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b7a:	cb 01       	movw	r24, r22
 b7c:	6c 2f       	mov	r22, r28
 b7e:	61 70       	andi	r22, 0x01	; 1
 b80:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 b84:	81 11       	cpse	r24, r1
 b86:	a5 c0       	rjmp	.+330    	; 0xcd2 <gbCartridge_write+0x302>
 b88:	ae 2d       	mov	r26, r14
 b8a:	c6 01       	movw	r24, r12
 b8c:	08 96       	adiw	r24, 0x08	; 8
 b8e:	a1 1d       	adc	r26, r1
 b90:	fc 01       	movw	r30, r24
 b92:	5a 2f       	mov	r21, r26
 b94:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 b98:	cb 01       	movw	r24, r22
 b9a:	6c 2f       	mov	r22, r28
 b9c:	62 70       	andi	r22, 0x02	; 2
 b9e:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 ba2:	81 11       	cpse	r24, r1
 ba4:	96 c0       	rjmp	.+300    	; 0xcd2 <gbCartridge_write+0x302>
 ba6:	ae 2d       	mov	r26, r14
 ba8:	c6 01       	movw	r24, r12
 baa:	0a 96       	adiw	r24, 0x0a	; 10
 bac:	a1 1d       	adc	r26, r1
 bae:	fc 01       	movw	r30, r24
 bb0:	5a 2f       	mov	r21, r26
 bb2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 bb6:	cb 01       	movw	r24, r22
 bb8:	6c 2f       	mov	r22, r28
 bba:	64 70       	andi	r22, 0x04	; 4
 bbc:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 bc0:	81 11       	cpse	r24, r1
 bc2:	87 c0       	rjmp	.+270    	; 0xcd2 <gbCartridge_write+0x302>
 bc4:	ae 2d       	mov	r26, r14
 bc6:	c6 01       	movw	r24, r12
 bc8:	0c 96       	adiw	r24, 0x0c	; 12
 bca:	a1 1d       	adc	r26, r1
 bcc:	fc 01       	movw	r30, r24
 bce:	5a 2f       	mov	r21, r26
 bd0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 bd4:	cb 01       	movw	r24, r22
 bd6:	6c 2f       	mov	r22, r28
 bd8:	68 70       	andi	r22, 0x08	; 8
 bda:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 bde:	81 11       	cpse	r24, r1
 be0:	78 c0       	rjmp	.+240    	; 0xcd2 <gbCartridge_write+0x302>
 be2:	ae 2d       	mov	r26, r14
 be4:	c6 01       	movw	r24, r12
 be6:	0e 96       	adiw	r24, 0x0e	; 14
 be8:	a1 1d       	adc	r26, r1
 bea:	fc 01       	movw	r30, r24
 bec:	5a 2f       	mov	r21, r26
 bee:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 bf2:	cb 01       	movw	r24, r22
 bf4:	6c 2f       	mov	r22, r28
 bf6:	60 71       	andi	r22, 0x10	; 16
 bf8:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 bfc:	81 11       	cpse	r24, r1
 bfe:	69 c0       	rjmp	.+210    	; 0xcd2 <gbCartridge_write+0x302>
 c00:	ae 2d       	mov	r26, r14
 c02:	c6 01       	movw	r24, r12
 c04:	40 96       	adiw	r24, 0x10	; 16
 c06:	a1 1d       	adc	r26, r1
 c08:	fc 01       	movw	r30, r24
 c0a:	5a 2f       	mov	r21, r26
 c0c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 c10:	cb 01       	movw	r24, r22
 c12:	6c 2f       	mov	r22, r28
 c14:	60 72       	andi	r22, 0x20	; 32
 c16:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 c1a:	81 11       	cpse	r24, r1
 c1c:	5a c0       	rjmp	.+180    	; 0xcd2 <gbCartridge_write+0x302>
 c1e:	ae 2d       	mov	r26, r14
 c20:	c6 01       	movw	r24, r12
 c22:	42 96       	adiw	r24, 0x12	; 18
 c24:	a1 1d       	adc	r26, r1
 c26:	fc 01       	movw	r30, r24
 c28:	5a 2f       	mov	r21, r26
 c2a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 c2e:	cb 01       	movw	r24, r22
 c30:	6c 2f       	mov	r22, r28
 c32:	68 74       	andi	r22, 0x48	; 72
 c34:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 c38:	81 11       	cpse	r24, r1
 c3a:	4b c0       	rjmp	.+150    	; 0xcd2 <gbCartridge_write+0x302>
 c3c:	c0 78       	andi	r28, 0x80	; 128
 c3e:	ae 2d       	mov	r26, r14
 c40:	c6 01       	movw	r24, r12
 c42:	44 96       	adiw	r24, 0x14	; 20
 c44:	a1 1d       	adc	r26, r1
 c46:	fc 01       	movw	r30, r24
 c48:	5a 2f       	mov	r21, r26
 c4a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 c4e:	cb 01       	movw	r24, r22
 c50:	6c 2f       	mov	r22, r28
 c52:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 c56:	81 11       	cpse	r24, r1
 c58:	3c c0       	rjmp	.+120    	; 0xcd2 <gbCartridge_write+0x302>
 c5a:	ae 2d       	mov	r26, r14
 c5c:	c6 01       	movw	r24, r12
 c5e:	46 96       	adiw	r24, 0x16	; 22
 c60:	a1 1d       	adc	r26, r1
 c62:	fc 01       	movw	r30, r24
 c64:	5a 2f       	mov	r21, r26
 c66:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 c6a:	cb 01       	movw	r24, r22
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 c72:	81 11       	cpse	r24, r1
 c74:	2e c0       	rjmp	.+92     	; 0xcd2 <gbCartridge_write+0x302>
 c76:	ae 2d       	mov	r26, r14
 c78:	c6 01       	movw	r24, r12
 c7a:	48 96       	adiw	r24, 0x18	; 24
 c7c:	a1 1d       	adc	r26, r1
 c7e:	fc 01       	movw	r30, r24
 c80:	5a 2f       	mov	r21, r26
 c82:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 c86:	cb 01       	movw	r24, r22
 c88:	61 e0       	ldi	r22, 0x01	; 1
 c8a:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 c8e:	81 11       	cpse	r24, r1
 c90:	20 c0       	rjmp	.+64     	; 0xcd2 <gbCartridge_write+0x302>
 c92:	8f ee       	ldi	r24, 0xEF	; 239
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	01 97       	sbiw	r24, 0x01	; 1
 c98:	f1 f7       	brne	.-4      	; 0xc96 <gbCartridge_write+0x2c6>
 c9a:	00 c0       	rjmp	.+0      	; 0xc9c <gbCartridge_write+0x2cc>
 c9c:	00 00       	nop
 c9e:	ae 2d       	mov	r26, r14
 ca0:	c6 01       	movw	r24, r12
 ca2:	46 96       	adiw	r24, 0x16	; 22
 ca4:	a1 1d       	adc	r26, r1
 ca6:	fc 01       	movw	r30, r24
 ca8:	5a 2f       	mov	r21, r26
 caa:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 cae:	cb 01       	movw	r24, r22
 cb0:	61 e0       	ldi	r22, 0x01	; 1
 cb2:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 cb6:	81 11       	cpse	r24, r1
 cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <gbCartridge_write+0x302>
 cba:	98 e1       	ldi	r25, 0x18	; 24
 cbc:	c9 0e       	add	r12, r25
 cbe:	d1 1c       	adc	r13, r1
 cc0:	e1 1c       	adc	r14, r1
 cc2:	f6 01       	movw	r30, r12
 cc4:	5e 2d       	mov	r21, r14
 cc6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 cca:	cb 01       	movw	r24, r22
 ccc:	61 e0       	ldi	r22, 0x01	; 1
 cce:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	1f 91       	pop	r17
 cd8:	ef 90       	pop	r14
 cda:	df 90       	pop	r13
 cdc:	cf 90       	pop	r12
 cde:	08 95       	ret

Disassembly of section .text.gbCartridge_read:

0000061a <gbCartridge_read>:
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	1f 92       	push	r1
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	6b 01       	movw	r12, r22
 634:	e8 2e       	mov	r14, r24
 636:	f4 2e       	mov	r15, r20
 638:	b5 2e       	mov	r11, r21
 63a:	89 01       	movw	r16, r18
 63c:	a8 2f       	mov	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	46 96       	adiw	r24, 0x16	; 22
 642:	a1 1d       	adc	r26, r1
 644:	fc 01       	movw	r30, r24
 646:	5a 2f       	mov	r21, r26
 648:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 64c:	cb 01       	movw	r24, r22
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 654:	81 11       	cpse	r24, r1
 656:	b1 c1       	rjmp	.+866    	; 0x9ba <__stack+0xbb>
 658:	ae 2d       	mov	r26, r14
 65a:	c6 01       	movw	r24, r12
 65c:	48 96       	adiw	r24, 0x18	; 24
 65e:	a1 1d       	adc	r26, r1
 660:	fc 01       	movw	r30, r24
 662:	5a 2f       	mov	r21, r26
 664:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 668:	cb 01       	movw	r24, r22
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 670:	81 11       	cpse	r24, r1
 672:	a3 c1       	rjmp	.+838    	; 0x9ba <__stack+0xbb>
 674:	8f e7       	ldi	r24, 0x7F	; 127
 676:	9c e0       	ldi	r25, 0x0C	; 12
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <gbCartridge_read+0x5e>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <gbCartridge_read+0x64>
 67e:	00 00       	nop
 680:	ae 2d       	mov	r26, r14
 682:	c6 01       	movw	r24, r12
 684:	02 96       	adiw	r24, 0x02	; 2
 686:	a1 1d       	adc	r26, r1
 688:	fc 01       	movw	r30, r24
 68a:	24 91       	lpm	r18, Z
 68c:	a7 fd       	sbrc	r26, 7
 68e:	20 81       	ld	r18, Z
 690:	f6 01       	movw	r30, r12
 692:	5e 2d       	mov	r21, r14
 694:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 698:	cb 01       	movw	r24, r22
 69a:	4f 2d       	mov	r20, r15
 69c:	62 2f       	mov	r22, r18
 69e:	0e 94 c2 10 	call	0x2184	; 0x2184 <gpioWriteU8>
 6a2:	81 11       	cpse	r24, r1
 6a4:	8a c1       	rjmp	.+788    	; 0x9ba <__stack+0xbb>
 6a6:	ae 2d       	mov	r26, r14
 6a8:	c6 01       	movw	r24, r12
 6aa:	05 96       	adiw	r24, 0x05	; 5
 6ac:	a1 1d       	adc	r26, r1
 6ae:	fc 01       	movw	r30, r24
 6b0:	24 91       	lpm	r18, Z
 6b2:	a7 fd       	sbrc	r26, 7
 6b4:	20 81       	ld	r18, Z
 6b6:	ae 2d       	mov	r26, r14
 6b8:	c6 01       	movw	r24, r12
 6ba:	03 96       	adiw	r24, 0x03	; 3
 6bc:	a1 1d       	adc	r26, r1
 6be:	fc 01       	movw	r30, r24
 6c0:	5a 2f       	mov	r21, r26
 6c2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 6c6:	cb 01       	movw	r24, r22
 6c8:	4b 2d       	mov	r20, r11
 6ca:	62 2f       	mov	r22, r18
 6cc:	0e 94 c2 10 	call	0x2184	; 0x2184 <gpioWriteU8>
 6d0:	81 11       	cpse	r24, r1
 6d2:	73 c1       	rjmp	.+742    	; 0x9ba <__stack+0xbb>
 6d4:	ef ee       	ldi	r30, 0xEF	; 239
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	31 97       	sbiw	r30, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <gbCartridge_read+0xbe>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <gbCartridge_read+0xc4>
 6de:	00 00       	nop
 6e0:	ae 2d       	mov	r26, r14
 6e2:	c6 01       	movw	r24, r12
 6e4:	46 96       	adiw	r24, 0x16	; 22
 6e6:	a1 1d       	adc	r26, r1
 6e8:	fc 01       	movw	r30, r24
 6ea:	5a 2f       	mov	r21, r26
 6ec:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 6f0:	cb 01       	movw	r24, r22
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 6f8:	81 11       	cpse	r24, r1
 6fa:	5f c1       	rjmp	.+702    	; 0x9ba <__stack+0xbb>
 6fc:	ae 2d       	mov	r26, r14
 6fe:	c6 01       	movw	r24, r12
 700:	48 96       	adiw	r24, 0x18	; 24
 702:	a1 1d       	adc	r26, r1
 704:	fc 01       	movw	r30, r24
 706:	5a 2f       	mov	r21, r26
 708:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 70c:	cb 01       	movw	r24, r22
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 714:	81 11       	cpse	r24, r1
 716:	51 c1       	rjmp	.+674    	; 0x9ba <__stack+0xbb>
 718:	8f ee       	ldi	r24, 0xEF	; 239
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <gbCartridge_read+0x102>
 720:	00 c0       	rjmp	.+0      	; 0x722 <gbCartridge_read+0x108>
 722:	00 00       	nop
 724:	ae 2d       	mov	r26, r14
 726:	c6 01       	movw	r24, r12
 728:	06 96       	adiw	r24, 0x06	; 6
 72a:	a1 1d       	adc	r26, r1
 72c:	fc 01       	movw	r30, r24
 72e:	5a 2f       	mov	r21, r26
 730:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 734:	cb 01       	movw	r24, r22
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 73c:	81 11       	cpse	r24, r1
 73e:	3d c1       	rjmp	.+634    	; 0x9ba <__stack+0xbb>
 740:	ae 2d       	mov	r26, r14
 742:	c6 01       	movw	r24, r12
 744:	08 96       	adiw	r24, 0x08	; 8
 746:	a1 1d       	adc	r26, r1
 748:	fc 01       	movw	r30, r24
 74a:	5a 2f       	mov	r21, r26
 74c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 750:	cb 01       	movw	r24, r22
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 758:	81 11       	cpse	r24, r1
 75a:	2f c1       	rjmp	.+606    	; 0x9ba <__stack+0xbb>
 75c:	ae 2d       	mov	r26, r14
 75e:	c6 01       	movw	r24, r12
 760:	0a 96       	adiw	r24, 0x0a	; 10
 762:	a1 1d       	adc	r26, r1
 764:	fc 01       	movw	r30, r24
 766:	5a 2f       	mov	r21, r26
 768:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 76c:	cb 01       	movw	r24, r22
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 774:	81 11       	cpse	r24, r1
 776:	21 c1       	rjmp	.+578    	; 0x9ba <__stack+0xbb>
 778:	ae 2d       	mov	r26, r14
 77a:	c6 01       	movw	r24, r12
 77c:	0c 96       	adiw	r24, 0x0c	; 12
 77e:	a1 1d       	adc	r26, r1
 780:	fc 01       	movw	r30, r24
 782:	5a 2f       	mov	r21, r26
 784:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 788:	cb 01       	movw	r24, r22
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 790:	81 11       	cpse	r24, r1
 792:	13 c1       	rjmp	.+550    	; 0x9ba <__stack+0xbb>
 794:	ae 2d       	mov	r26, r14
 796:	c6 01       	movw	r24, r12
 798:	0e 96       	adiw	r24, 0x0e	; 14
 79a:	a1 1d       	adc	r26, r1
 79c:	fc 01       	movw	r30, r24
 79e:	5a 2f       	mov	r21, r26
 7a0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 7a4:	cb 01       	movw	r24, r22
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 7ac:	81 11       	cpse	r24, r1
 7ae:	05 c1       	rjmp	.+522    	; 0x9ba <__stack+0xbb>
 7b0:	ae 2d       	mov	r26, r14
 7b2:	c6 01       	movw	r24, r12
 7b4:	40 96       	adiw	r24, 0x10	; 16
 7b6:	a1 1d       	adc	r26, r1
 7b8:	fc 01       	movw	r30, r24
 7ba:	5a 2f       	mov	r21, r26
 7bc:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 7c0:	cb 01       	movw	r24, r22
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 7c8:	81 11       	cpse	r24, r1
 7ca:	f7 c0       	rjmp	.+494    	; 0x9ba <__stack+0xbb>
 7cc:	ae 2d       	mov	r26, r14
 7ce:	c6 01       	movw	r24, r12
 7d0:	42 96       	adiw	r24, 0x12	; 18
 7d2:	a1 1d       	adc	r26, r1
 7d4:	fc 01       	movw	r30, r24
 7d6:	5a 2f       	mov	r21, r26
 7d8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 7dc:	cb 01       	movw	r24, r22
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 7e4:	81 11       	cpse	r24, r1
 7e6:	e9 c0       	rjmp	.+466    	; 0x9ba <__stack+0xbb>
 7e8:	ae 2d       	mov	r26, r14
 7ea:	c6 01       	movw	r24, r12
 7ec:	44 96       	adiw	r24, 0x14	; 20
 7ee:	a1 1d       	adc	r26, r1
 7f0:	fc 01       	movw	r30, r24
 7f2:	5a 2f       	mov	r21, r26
 7f4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 7f8:	cb 01       	movw	r24, r22
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
 800:	81 11       	cpse	r24, r1
 802:	db c0       	rjmp	.+438    	; 0x9ba <__stack+0xbb>
 804:	ae 2d       	mov	r26, r14
 806:	c6 01       	movw	r24, r12
 808:	06 96       	adiw	r24, 0x06	; 6
 80a:	a1 1d       	adc	r26, r1
 80c:	fc 01       	movw	r30, r24
 80e:	5a 2f       	mov	r21, r26
 810:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 814:	cb 01       	movw	r24, r22
 816:	be 01       	movw	r22, r28
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 820:	81 11       	cpse	r24, r1
 822:	cb c0       	rjmp	.+406    	; 0x9ba <__stack+0xbb>
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	f8 01       	movw	r30, r16
 828:	80 83       	st	Z, r24
 82a:	ae 2d       	mov	r26, r14
 82c:	c6 01       	movw	r24, r12
 82e:	08 96       	adiw	r24, 0x08	; 8
 830:	a1 1d       	adc	r26, r1
 832:	fc 01       	movw	r30, r24
 834:	5a 2f       	mov	r21, r26
 836:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 83a:	cb 01       	movw	r24, r22
 83c:	be 01       	movw	r22, r28
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 846:	81 11       	cpse	r24, r1
 848:	b8 c0       	rjmp	.+368    	; 0x9ba <__stack+0xbb>
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	f8 01       	movw	r30, r16
 854:	90 81       	ld	r25, Z
 856:	89 2b       	or	r24, r25
 858:	80 83       	st	Z, r24
 85a:	ae 2d       	mov	r26, r14
 85c:	c6 01       	movw	r24, r12
 85e:	0a 96       	adiw	r24, 0x0a	; 10
 860:	a1 1d       	adc	r26, r1
 862:	fc 01       	movw	r30, r24
 864:	5a 2f       	mov	r21, r26
 866:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 86a:	cb 01       	movw	r24, r22
 86c:	be 01       	movw	r22, r28
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 876:	81 11       	cpse	r24, r1
 878:	a0 c0       	rjmp	.+320    	; 0x9ba <__stack+0xbb>
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	f4 e0       	ldi	r31, 0x04	; 4
 87e:	8f 9f       	mul	r24, r31
 880:	c0 01       	movw	r24, r0
 882:	11 24       	eor	r1, r1
 884:	f8 01       	movw	r30, r16
 886:	90 81       	ld	r25, Z
 888:	89 2b       	or	r24, r25
 88a:	80 83       	st	Z, r24
 88c:	ae 2d       	mov	r26, r14
 88e:	c6 01       	movw	r24, r12
 890:	0c 96       	adiw	r24, 0x0c	; 12
 892:	a1 1d       	adc	r26, r1
 894:	fc 01       	movw	r30, r24
 896:	5a 2f       	mov	r21, r26
 898:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 89c:	cb 01       	movw	r24, r22
 89e:	be 01       	movw	r22, r28
 8a0:	6f 5f       	subi	r22, 0xFF	; 255
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 8a8:	81 11       	cpse	r24, r1
 8aa:	87 c0       	rjmp	.+270    	; 0x9ba <__stack+0xbb>
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	f8 e0       	ldi	r31, 0x08	; 8
 8b0:	8f 9f       	mul	r24, r31
 8b2:	c0 01       	movw	r24, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	f8 01       	movw	r30, r16
 8b8:	90 81       	ld	r25, Z
 8ba:	89 2b       	or	r24, r25
 8bc:	80 83       	st	Z, r24
 8be:	ae 2d       	mov	r26, r14
 8c0:	c6 01       	movw	r24, r12
 8c2:	0e 96       	adiw	r24, 0x0e	; 14
 8c4:	a1 1d       	adc	r26, r1
 8c6:	fc 01       	movw	r30, r24
 8c8:	5a 2f       	mov	r21, r26
 8ca:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 8ce:	cb 01       	movw	r24, r22
 8d0:	be 01       	movw	r22, r28
 8d2:	6f 5f       	subi	r22, 0xFF	; 255
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 8da:	81 11       	cpse	r24, r1
 8dc:	6e c0       	rjmp	.+220    	; 0x9ba <__stack+0xbb>
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	f0 e1       	ldi	r31, 0x10	; 16
 8e2:	8f 9f       	mul	r24, r31
 8e4:	c0 01       	movw	r24, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	f8 01       	movw	r30, r16
 8ea:	90 81       	ld	r25, Z
 8ec:	89 2b       	or	r24, r25
 8ee:	80 83       	st	Z, r24
 8f0:	ae 2d       	mov	r26, r14
 8f2:	c6 01       	movw	r24, r12
 8f4:	40 96       	adiw	r24, 0x10	; 16
 8f6:	a1 1d       	adc	r26, r1
 8f8:	fc 01       	movw	r30, r24
 8fa:	5a 2f       	mov	r21, r26
 8fc:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 900:	cb 01       	movw	r24, r22
 902:	be 01       	movw	r22, r28
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 90c:	81 11       	cpse	r24, r1
 90e:	55 c0       	rjmp	.+170    	; 0x9ba <__stack+0xbb>
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	f0 e2       	ldi	r31, 0x20	; 32
 914:	8f 9f       	mul	r24, r31
 916:	c0 01       	movw	r24, r0
 918:	11 24       	eor	r1, r1
 91a:	f8 01       	movw	r30, r16
 91c:	90 81       	ld	r25, Z
 91e:	89 2b       	or	r24, r25
 920:	80 83       	st	Z, r24
 922:	ae 2d       	mov	r26, r14
 924:	c6 01       	movw	r24, r12
 926:	42 96       	adiw	r24, 0x12	; 18
 928:	a1 1d       	adc	r26, r1
 92a:	fc 01       	movw	r30, r24
 92c:	5a 2f       	mov	r21, r26
 92e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 932:	cb 01       	movw	r24, r22
 934:	be 01       	movw	r22, r28
 936:	6f 5f       	subi	r22, 0xFF	; 255
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 93e:	81 11       	cpse	r24, r1
 940:	3c c0       	rjmp	.+120    	; 0x9ba <__stack+0xbb>
 942:	89 81       	ldd	r24, Y+1	; 0x01
 944:	f0 e4       	ldi	r31, 0x40	; 64
 946:	8f 9f       	mul	r24, r31
 948:	c0 01       	movw	r24, r0
 94a:	11 24       	eor	r1, r1
 94c:	f8 01       	movw	r30, r16
 94e:	90 81       	ld	r25, Z
 950:	89 2b       	or	r24, r25
 952:	80 83       	st	Z, r24
 954:	ae 2d       	mov	r26, r14
 956:	c6 01       	movw	r24, r12
 958:	44 96       	adiw	r24, 0x14	; 20
 95a:	a1 1d       	adc	r26, r1
 95c:	fc 01       	movw	r30, r24
 95e:	5a 2f       	mov	r21, r26
 960:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 964:	cb 01       	movw	r24, r22
 966:	be 01       	movw	r22, r28
 968:	6f 5f       	subi	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <gpioReadPin>
 970:	81 11       	cpse	r24, r1
 972:	23 c0       	rjmp	.+70     	; 0x9ba <__stack+0xbb>
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	f0 e8       	ldi	r31, 0x80	; 128
 978:	8f 9f       	mul	r24, r31
 97a:	c0 01       	movw	r24, r0
 97c:	11 24       	eor	r1, r1
 97e:	f8 01       	movw	r30, r16
 980:	90 81       	ld	r25, Z
 982:	89 2b       	or	r24, r25
 984:	80 83       	st	Z, r24
 986:	ae 2d       	mov	r26, r14
 988:	c6 01       	movw	r24, r12
 98a:	46 96       	adiw	r24, 0x16	; 22
 98c:	a1 1d       	adc	r26, r1
 98e:	fc 01       	movw	r30, r24
 990:	5a 2f       	mov	r21, r26
 992:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 996:	cb 01       	movw	r24, r22
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 99e:	81 11       	cpse	r24, r1
 9a0:	0c c0       	rjmp	.+24     	; 0x9ba <__stack+0xbb>
 9a2:	f8 e1       	ldi	r31, 0x18	; 24
 9a4:	cf 0e       	add	r12, r31
 9a6:	d1 1c       	adc	r13, r1
 9a8:	e1 1c       	adc	r14, r1
 9aa:	f6 01       	movw	r30, r12
 9ac:	5e 2d       	mov	r21, r14
 9ae:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__xload_2>
 9b2:	cb 01       	movw	r24, r22
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
 9ba:	0f 90       	pop	r0
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	08 95       	ret

Disassembly of section .text.gbCartridge_readBlob:

000018f6 <gbCartridge_readBlob>:
    18f6:	6f 92       	push	r6
    18f8:	7f 92       	push	r7
    18fa:	8f 92       	push	r8
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	1f 92       	push	r1
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	3b 01       	movw	r6, r22
    1918:	88 2e       	mov	r8, r24
    191a:	6a 01       	movw	r12, r20
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	59 01       	movw	r10, r18
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	a8 1a       	sub	r10, r24
    1926:	b1 08       	sbc	r11, r1
    1928:	7a 01       	movw	r14, r20
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	17 c0       	rjmp	.+46     	; 0x195c <gbCartridge_readBlob+0x66>
    192e:	9e 01       	movw	r18, r28
    1930:	2f 5f       	subi	r18, 0xFF	; 255
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	a7 01       	movw	r20, r14
    1936:	88 2d       	mov	r24, r8
    1938:	b3 01       	movw	r22, r6
    193a:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
    193e:	81 11       	cpse	r24, r1
    1940:	13 c0       	rjmp	.+38     	; 0x1968 <gbCartridge_readBlob+0x72>
    1942:	01 15       	cp	r16, r1
    1944:	11 05       	cpc	r17, r1
    1946:	39 f0       	breq	.+14     	; 0x1956 <gbCartridge_readBlob+0x60>
    1948:	f7 01       	movw	r30, r14
    194a:	ec 19       	sub	r30, r12
    194c:	fd 09       	sbc	r31, r13
    194e:	e0 0f       	add	r30, r16
    1950:	f1 1f       	adc	r31, r17
    1952:	99 81       	ldd	r25, Y+1	; 0x01
    1954:	90 83       	st	Z, r25
    1956:	9f ef       	ldi	r25, 0xFF	; 255
    1958:	e9 1a       	sub	r14, r25
    195a:	f9 0a       	sbc	r15, r25
    195c:	95 01       	movw	r18, r10
    195e:	2c 0d       	add	r18, r12
    1960:	3d 1d       	adc	r19, r13
    1962:	2e 15       	cp	r18, r14
    1964:	3f 05       	cpc	r19, r15
    1966:	18 f7       	brcc	.-58     	; 0x192e <gbCartridge_readBlob+0x38>
    1968:	0f 90       	pop	r0
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	08 95       	ret

Disassembly of section .text.gbCartridge_isPressent:

0000185c <gbCartridge_isPressent>:
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	e0 97       	sbiw	r28, 0x30	; 48
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	8e 01       	movw	r16, r28
    1876:	0f 5f       	subi	r16, 0xFF	; 255
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	20 e3       	ldi	r18, 0x30	; 48
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	44 e0       	ldi	r20, 0x04	; 4
    1880:	51 e0       	ldi	r21, 0x01	; 1
    1882:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <gbCartridge_readBlob>
    1886:	88 23       	and	r24, r24
    1888:	d9 f0       	breq	.+54     	; 0x18c0 <gbCartridge_isPressent+0x64>
    188a:	28 2f       	mov	r18, r24
    188c:	08 2e       	mov	r0, r24
    188e:	00 0c       	add	r0, r0
    1890:	33 0b       	sbc	r19, r19
    1892:	3f 93       	push	r19
    1894:	8f 93       	push	r24
    1896:	8e ed       	ldi	r24, 0xDE	; 222
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	af 93       	push	r26
    189e:	9f 93       	push	r25
    18a0:	8f 93       	push	r24
    18a2:	0e e1       	ldi	r16, 0x1E	; 30
    18a4:	11 e0       	ldi	r17, 0x01	; 1
    18a6:	1f 93       	push	r17
    18a8:	0f 93       	push	r16
    18aa:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <sprintf>
    18ae:	b8 01       	movw	r22, r16
    18b0:	80 e8       	ldi	r24, 0x80	; 128
    18b2:	0e 94 85 10 	call	0x210a	; 0x210a <uart_puts>
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	9e 01       	movw	r18, r28
    18c2:	2f 5f       	subi	r18, 0xFF	; 255
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	00 e3       	ldi	r16, 0x30	; 48
    18ca:	10 e0       	ldi	r17, 0x00	; 0
    18cc:	62 ea       	ldi	r22, 0xA2	; 162
    18ce:	71 e0       	ldi	r23, 0x01	; 1
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <memcmp>
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	89 2b       	or	r24, r25
    18da:	09 f0       	breq	.+2      	; 0x18de <gbCartridge_isPressent+0x82>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	82 2f       	mov	r24, r18
    18e0:	e0 96       	adiw	r28, 0x30	; 48
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

Disassembly of section .text.gbCartridge_isChecksumValid:

00001af2 <gbCartridge_isChecksumValid>:
    1af2:	6f 92       	push	r6
    1af4:	7f 92       	push	r7
    1af6:	8f 92       	push	r8
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	1f 92       	push	r1
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	3b 01       	movw	r6, r22
    1b0c:	88 2e       	mov	r8, r24
    1b0e:	04 e3       	ldi	r16, 0x34	; 52
    1b10:	11 e0       	ldi	r17, 0x01	; 1
    1b12:	e1 2c       	mov	r14, r1
    1b14:	f1 2c       	mov	r15, r1
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <gbCartridge_isChecksumValid+0x44>
    1b18:	9e 01       	movw	r18, r28
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	a8 01       	movw	r20, r16
    1b20:	88 2d       	mov	r24, r8
    1b22:	b3 01       	movw	r22, r6
    1b24:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <gbCartridge_isChecksumValid+0x58>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	e8 0e       	add	r14, r24
    1b30:	f1 1c       	adc	r15, r1
    1b32:	0f 5f       	subi	r16, 0xFF	; 255
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	0e 34       	cpi	r16, 0x4E	; 78
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	18 07       	cpc	r17, r24
    1b3c:	6c f3       	brlt	.-38     	; 0x1b18 <gbCartridge_isChecksumValid+0x26>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	97 ee       	ldi	r25, 0xE7	; 231
    1b42:	e9 16       	cp	r14, r25
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <gbCartridge_isChecksumValid+0x5a>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <gbCartridge_isChecksumValid+0x5a>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	0f 90       	pop	r0
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	08 95       	ret

Disassembly of section .text.gbCartridge_getRomInfo:

00000ce0 <gbCartridge_getRomInfo>:
 ce0:	6f 92       	push	r6
 ce2:	7f 92       	push	r7
 ce4:	8f 92       	push	r8
 ce6:	ef 92       	push	r14
 ce8:	ff 92       	push	r15
 cea:	0f 93       	push	r16
 cec:	1f 93       	push	r17
 cee:	cf 93       	push	r28
 cf0:	df 93       	push	r29
 cf2:	1f 92       	push	r1
 cf4:	cd b7       	in	r28, 0x3d	; 61
 cf6:	de b7       	in	r29, 0x3e	; 62
 cf8:	3b 01       	movw	r6, r22
 cfa:	88 2e       	mov	r8, r24
 cfc:	7a 01       	movw	r14, r20
 cfe:	8a 01       	movw	r16, r20
 d00:	2f e0       	ldi	r18, 0x0F	; 15
 d02:	30 e0       	ldi	r19, 0x00	; 0
 d04:	44 e3       	ldi	r20, 0x34	; 52
 d06:	51 e0       	ldi	r21, 0x01	; 1
 d08:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <gbCartridge_readBlob>
 d0c:	81 11       	cpse	r24, r1
 d0e:	53 c1       	rjmp	.+678    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 d10:	d7 01       	movw	r26, r14
 d12:	1f 96       	adiw	r26, 0x0f	; 15
 d14:	1c 92       	st	X, r1
 d16:	9e 01       	movw	r18, r28
 d18:	2f 5f       	subi	r18, 0xFF	; 255
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	43 e4       	ldi	r20, 0x43	; 67
 d1e:	51 e0       	ldi	r21, 0x01	; 1
 d20:	88 2d       	mov	r24, r8
 d22:	b3 01       	movw	r22, r6
 d24:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
 d28:	81 11       	cpse	r24, r1
 d2a:	45 c1       	rjmp	.+650    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 d2c:	89 81       	ldd	r24, Y+1	; 0x01
 d2e:	80 38       	cpi	r24, 0x80	; 128
 d30:	21 f0       	breq	.+8      	; 0xd3a <gbCartridge_getRomInfo+0x5a>
 d32:	80 3c       	cpi	r24, 0xC0	; 192
 d34:	21 f4       	brne	.+8      	; 0xd3e <gbCartridge_getRomInfo+0x5e>
 d36:	81 e0       	ldi	r24, 0x01	; 1
 d38:	03 c0       	rjmp	.+6      	; 0xd40 <gbCartridge_getRomInfo+0x60>
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	01 c0       	rjmp	.+2      	; 0xd40 <gbCartridge_getRomInfo+0x60>
 d3e:	80 e0       	ldi	r24, 0x00	; 0
 d40:	f7 01       	movw	r30, r14
 d42:	82 8b       	std	Z+18, r24	; 0x12
 d44:	9e 01       	movw	r18, r28
 d46:	2f 5f       	subi	r18, 0xFF	; 255
 d48:	3f 4f       	sbci	r19, 0xFF	; 255
 d4a:	46 e4       	ldi	r20, 0x46	; 70
 d4c:	51 e0       	ldi	r21, 0x01	; 1
 d4e:	88 2d       	mov	r24, r8
 d50:	b3 01       	movw	r22, r6
 d52:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
 d56:	81 11       	cpse	r24, r1
 d58:	2e c1       	rjmp	.+604    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 d5a:	81 e0       	ldi	r24, 0x01	; 1
 d5c:	99 81       	ldd	r25, Y+1	; 0x01
 d5e:	93 30       	cpi	r25, 0x03	; 3
 d60:	09 f0       	breq	.+2      	; 0xd64 <gbCartridge_getRomInfo+0x84>
 d62:	80 e0       	ldi	r24, 0x00	; 0
 d64:	d7 01       	movw	r26, r14
 d66:	53 96       	adiw	r26, 0x13	; 19
 d68:	8c 93       	st	X, r24
 d6a:	97 01       	movw	r18, r14
 d6c:	27 5e       	subi	r18, 0xE7	; 231
 d6e:	3f 4f       	sbci	r19, 0xFF	; 255
 d70:	49 e4       	ldi	r20, 0x49	; 73
 d72:	51 e0       	ldi	r21, 0x01	; 1
 d74:	88 2d       	mov	r24, r8
 d76:	b3 01       	movw	r22, r6
 d78:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
 d7c:	81 11       	cpse	r24, r1
 d7e:	1b c1       	rjmp	.+566    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 d80:	97 01       	movw	r18, r14
 d82:	29 5e       	subi	r18, 0xE9	; 233
 d84:	3f 4f       	sbci	r19, 0xFF	; 255
 d86:	4c e4       	ldi	r20, 0x4C	; 76
 d88:	51 e0       	ldi	r21, 0x01	; 1
 d8a:	88 2d       	mov	r24, r8
 d8c:	b3 01       	movw	r22, r6
 d8e:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
 d92:	81 11       	cpse	r24, r1
 d94:	10 c1       	rjmp	.+544    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 d96:	d7 01       	movw	r26, r14
 d98:	58 96       	adiw	r26, 0x18	; 24
 d9a:	ec 91       	ld	r30, X
 d9c:	8e 2f       	mov	r24, r30
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	88 30       	cpi	r24, 0x08	; 8
 da2:	91 05       	cpc	r25, r1
 da4:	e8 f5       	brcc	.+122    	; 0xe20 <gbCartridge_getRomInfo+0x140>
 da6:	fc 01       	movw	r30, r24
 da8:	ec 5c       	subi	r30, 0xCC	; 204
 daa:	ff 4f       	sbci	r31, 0xFF	; 255
 dac:	0c 94 df 10 	jmp	0x21be	; 0x21be <__tablejump2__>
 db0:	82 e0       	ldi	r24, 0x02	; 2
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	f7 01       	movw	r30, r14
 db6:	93 8f       	std	Z+27, r25	; 0x1b
 db8:	82 8f       	std	Z+26, r24	; 0x1a
 dba:	37 c0       	rjmp	.+110    	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 dbc:	84 e0       	ldi	r24, 0x04	; 4
 dbe:	90 e0       	ldi	r25, 0x00	; 0
 dc0:	d7 01       	movw	r26, r14
 dc2:	5b 96       	adiw	r26, 0x1b	; 27
 dc4:	9c 93       	st	X, r25
 dc6:	8e 93       	st	-X, r24
 dc8:	5a 97       	sbiw	r26, 0x1a	; 26
 dca:	2f c0       	rjmp	.+94     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 dcc:	88 e0       	ldi	r24, 0x08	; 8
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	f7 01       	movw	r30, r14
 dd2:	93 8f       	std	Z+27, r25	; 0x1b
 dd4:	82 8f       	std	Z+26, r24	; 0x1a
 dd6:	29 c0       	rjmp	.+82     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 dd8:	80 e1       	ldi	r24, 0x10	; 16
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	d7 01       	movw	r26, r14
 dde:	5b 96       	adiw	r26, 0x1b	; 27
 de0:	9c 93       	st	X, r25
 de2:	8e 93       	st	-X, r24
 de4:	5a 97       	sbiw	r26, 0x1a	; 26
 de6:	21 c0       	rjmp	.+66     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 de8:	80 e2       	ldi	r24, 0x20	; 32
 dea:	90 e0       	ldi	r25, 0x00	; 0
 dec:	f7 01       	movw	r30, r14
 dee:	93 8f       	std	Z+27, r25	; 0x1b
 df0:	82 8f       	std	Z+26, r24	; 0x1a
 df2:	1b c0       	rjmp	.+54     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 df4:	80 e4       	ldi	r24, 0x40	; 64
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	d7 01       	movw	r26, r14
 dfa:	5b 96       	adiw	r26, 0x1b	; 27
 dfc:	9c 93       	st	X, r25
 dfe:	8e 93       	st	-X, r24
 e00:	5a 97       	sbiw	r26, 0x1a	; 26
 e02:	13 c0       	rjmp	.+38     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 e04:	80 e8       	ldi	r24, 0x80	; 128
 e06:	90 e0       	ldi	r25, 0x00	; 0
 e08:	f7 01       	movw	r30, r14
 e0a:	93 8f       	std	Z+27, r25	; 0x1b
 e0c:	82 8f       	std	Z+26, r24	; 0x1a
 e0e:	0d c0       	rjmp	.+26     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	91 e0       	ldi	r25, 0x01	; 1
 e14:	d7 01       	movw	r26, r14
 e16:	5b 96       	adiw	r26, 0x1b	; 27
 e18:	9c 93       	st	X, r25
 e1a:	8e 93       	st	-X, r24
 e1c:	5a 97       	sbiw	r26, 0x1a	; 26
 e1e:	05 c0       	rjmp	.+10     	; 0xe2a <gbCartridge_getRomInfo+0x14a>
 e20:	82 e0       	ldi	r24, 0x02	; 2
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	f7 01       	movw	r30, r14
 e26:	93 8f       	std	Z+27, r25	; 0x1b
 e28:	82 8f       	std	Z+26, r24	; 0x1a
 e2a:	d7 01       	movw	r26, r14
 e2c:	59 96       	adiw	r26, 0x19	; 25
 e2e:	8c 91       	ld	r24, X
 e30:	82 30       	cpi	r24, 0x02	; 2
 e32:	b9 f0       	breq	.+46     	; 0xe62 <gbCartridge_getRomInfo+0x182>
 e34:	28 f4       	brcc	.+10     	; 0xe40 <gbCartridge_getRomInfo+0x160>
 e36:	88 23       	and	r24, r24
 e38:	41 f0       	breq	.+16     	; 0xe4a <gbCartridge_getRomInfo+0x16a>
 e3a:	81 30       	cpi	r24, 0x01	; 1
 e3c:	51 f0       	breq	.+20     	; 0xe52 <gbCartridge_getRomInfo+0x172>
 e3e:	25 c0       	rjmp	.+74     	; 0xe8a <gbCartridge_getRomInfo+0x1aa>
 e40:	83 30       	cpi	r24, 0x03	; 3
 e42:	a9 f0       	breq	.+42     	; 0xe6e <gbCartridge_getRomInfo+0x18e>
 e44:	84 30       	cpi	r24, 0x04	; 4
 e46:	d9 f0       	breq	.+54     	; 0xe7e <gbCartridge_getRomInfo+0x19e>
 e48:	20 c0       	rjmp	.+64     	; 0xe8a <gbCartridge_getRomInfo+0x1aa>
 e4a:	f7 01       	movw	r30, r14
 e4c:	15 8e       	std	Z+29, r1	; 0x1d
 e4e:	14 8e       	std	Z+28, r1	; 0x1c
 e50:	21 c0       	rjmp	.+66     	; 0xe94 <gbCartridge_getRomInfo+0x1b4>
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	90 e0       	ldi	r25, 0x00	; 0
 e56:	d7 01       	movw	r26, r14
 e58:	5d 96       	adiw	r26, 0x1d	; 29
 e5a:	9c 93       	st	X, r25
 e5c:	8e 93       	st	-X, r24
 e5e:	5c 97       	sbiw	r26, 0x1c	; 28
 e60:	19 c0       	rjmp	.+50     	; 0xe94 <gbCartridge_getRomInfo+0x1b4>
 e62:	81 e0       	ldi	r24, 0x01	; 1
 e64:	90 e0       	ldi	r25, 0x00	; 0
 e66:	f7 01       	movw	r30, r14
 e68:	95 8f       	std	Z+29, r25	; 0x1d
 e6a:	84 8f       	std	Z+28, r24	; 0x1c
 e6c:	13 c0       	rjmp	.+38     	; 0xe94 <gbCartridge_getRomInfo+0x1b4>
 e6e:	84 e0       	ldi	r24, 0x04	; 4
 e70:	90 e0       	ldi	r25, 0x00	; 0
 e72:	d7 01       	movw	r26, r14
 e74:	5d 96       	adiw	r26, 0x1d	; 29
 e76:	9c 93       	st	X, r25
 e78:	8e 93       	st	-X, r24
 e7a:	5c 97       	sbiw	r26, 0x1c	; 28
 e7c:	0b c0       	rjmp	.+22     	; 0xe94 <gbCartridge_getRomInfo+0x1b4>
 e7e:	80 e1       	ldi	r24, 0x10	; 16
 e80:	90 e0       	ldi	r25, 0x00	; 0
 e82:	f7 01       	movw	r30, r14
 e84:	95 8f       	std	Z+29, r25	; 0x1d
 e86:	84 8f       	std	Z+28, r24	; 0x1c
 e88:	05 c0       	rjmp	.+10     	; 0xe94 <gbCartridge_getRomInfo+0x1b4>
 e8a:	d7 01       	movw	r26, r14
 e8c:	5d 96       	adiw	r26, 0x1d	; 29
 e8e:	1c 92       	st	X, r1
 e90:	1e 92       	st	-X, r1
 e92:	5c 97       	sbiw	r26, 0x1c	; 28
 e94:	97 01       	movw	r18, r14
 e96:	2f 5e       	subi	r18, 0xEF	; 239
 e98:	3f 4f       	sbci	r19, 0xFF	; 255
 e9a:	47 e4       	ldi	r20, 0x47	; 71
 e9c:	51 e0       	ldi	r21, 0x01	; 1
 e9e:	88 2d       	mov	r24, r8
 ea0:	b3 01       	movw	r22, r6
 ea2:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
 ea6:	81 11       	cpse	r24, r1
 ea8:	86 c0       	rjmp	.+268    	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 eaa:	f7 01       	movw	r30, r14
 eac:	91 89       	ldd	r25, Z+17	; 0x11
 eae:	94 31       	cpi	r25, 0x14	; 20
 eb0:	a0 f4       	brcc	.+40     	; 0xeda <gbCartridge_getRomInfo+0x1fa>
 eb2:	9f 30       	cpi	r25, 0x0F	; 15
 eb4:	a0 f5       	brcc	.+104    	; 0xf1e <gbCartridge_getRomInfo+0x23e>
 eb6:	97 30       	cpi	r25, 0x07	; 7
 eb8:	38 f4       	brcc	.+14     	; 0xec8 <gbCartridge_getRomInfo+0x1e8>
 eba:	95 30       	cpi	r25, 0x05	; 5
 ebc:	68 f5       	brcc	.+90     	; 0xf18 <gbCartridge_getRomInfo+0x238>
 ebe:	99 23       	and	r25, r25
 ec0:	19 f1       	breq	.+70     	; 0xf08 <gbCartridge_getRomInfo+0x228>
 ec2:	94 30       	cpi	r25, 0x04	; 4
 ec4:	28 f1       	brcs	.+74     	; 0xf10 <gbCartridge_getRomInfo+0x230>
 ec6:	36 c0       	rjmp	.+108    	; 0xf34 <gbCartridge_getRomInfo+0x254>
 ec8:	98 30       	cpi	r25, 0x08	; 8
 eca:	a0 f1       	brcs	.+104    	; 0xf34 <gbCartridge_getRomInfo+0x254>
 ecc:	9a 30       	cpi	r25, 0x0A	; 10
 ece:	e0 f0       	brcs	.+56     	; 0xf08 <gbCartridge_getRomInfo+0x228>
 ed0:	25 ef       	ldi	r18, 0xF5	; 245
 ed2:	29 0f       	add	r18, r25
 ed4:	23 30       	cpi	r18, 0x03	; 3
 ed6:	50 f1       	brcs	.+84     	; 0xf2c <gbCartridge_getRomInfo+0x24c>
 ed8:	2d c0       	rjmp	.+90     	; 0xf34 <gbCartridge_getRomInfo+0x254>
 eda:	97 35       	cpi	r25, 0x57	; 87
 edc:	70 f4       	brcc	.+28     	; 0xefa <gbCartridge_getRomInfo+0x21a>
 ede:	95 35       	cpi	r25, 0x55	; 85
 ee0:	28 f5       	brcc	.+74     	; 0xf2c <gbCartridge_getRomInfo+0x24c>
 ee2:	9f 31       	cpi	r25, 0x1F	; 31
 ee4:	38 f4       	brcc	.+14     	; 0xef4 <gbCartridge_getRomInfo+0x214>
 ee6:	99 31       	cpi	r25, 0x19	; 25
 ee8:	f0 f4       	brcc	.+60     	; 0xf26 <gbCartridge_getRomInfo+0x246>
 eea:	2b ee       	ldi	r18, 0xEB	; 235
 eec:	29 0f       	add	r18, r25
 eee:	23 30       	cpi	r18, 0x03	; 3
 ef0:	e8 f0       	brcs	.+58     	; 0xf2c <gbCartridge_getRomInfo+0x24c>
 ef2:	20 c0       	rjmp	.+64     	; 0xf34 <gbCartridge_getRomInfo+0x254>
 ef4:	92 32       	cpi	r25, 0x22	; 34
 ef6:	d1 f0       	breq	.+52     	; 0xf2c <gbCartridge_getRomInfo+0x24c>
 ef8:	1d c0       	rjmp	.+58     	; 0xf34 <gbCartridge_getRomInfo+0x254>
 efa:	9f 3f       	cpi	r25, 0xFF	; 255
 efc:	48 f4       	brcc	.+18     	; 0xf10 <gbCartridge_getRomInfo+0x230>
 efe:	9d 3f       	cpi	r25, 0xFD	; 253
 f00:	a8 f4       	brcc	.+42     	; 0xf2c <gbCartridge_getRomInfo+0x24c>
 f02:	9c 3f       	cpi	r25, 0xFC	; 252
 f04:	61 f0       	breq	.+24     	; 0xf1e <gbCartridge_getRomInfo+0x23e>
 f06:	16 c0       	rjmp	.+44     	; 0xf34 <gbCartridge_getRomInfo+0x254>
 f08:	d7 01       	movw	r26, r14
 f0a:	50 96       	adiw	r26, 0x10	; 16
 f0c:	1c 92       	st	X, r1
 f0e:	16 c0       	rjmp	.+44     	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f10:	21 e0       	ldi	r18, 0x01	; 1
 f12:	f7 01       	movw	r30, r14
 f14:	20 8b       	std	Z+16, r18	; 0x10
 f16:	12 c0       	rjmp	.+36     	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f18:	22 e0       	ldi	r18, 0x02	; 2
 f1a:	20 8b       	std	Z+16, r18	; 0x10
 f1c:	0f c0       	rjmp	.+30     	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f1e:	23 e0       	ldi	r18, 0x03	; 3
 f20:	f7 01       	movw	r30, r14
 f22:	20 8b       	std	Z+16, r18	; 0x10
 f24:	0b c0       	rjmp	.+22     	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f26:	25 e0       	ldi	r18, 0x05	; 5
 f28:	20 8b       	std	Z+16, r18	; 0x10
 f2a:	08 c0       	rjmp	.+16     	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f2c:	2f ef       	ldi	r18, 0xFF	; 255
 f2e:	f7 01       	movw	r30, r14
 f30:	20 8b       	std	Z+16, r18	; 0x10
 f32:	04 c0       	rjmp	.+8      	; 0xf3c <gbCartridge_getRomInfo+0x25c>
 f34:	2f ef       	ldi	r18, 0xFF	; 255
 f36:	d7 01       	movw	r26, r14
 f38:	50 96       	adiw	r26, 0x10	; 16
 f3a:	2c 93       	st	X, r18
 f3c:	93 31       	cpi	r25, 0x13	; 19
 f3e:	f9 f0       	breq	.+62     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f40:	80 f4       	brcc	.+32     	; 0xf62 <gbCartridge_getRomInfo+0x282>
 f42:	99 30       	cpi	r25, 0x09	; 9
 f44:	e1 f0       	breq	.+56     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f46:	28 f4       	brcc	.+10     	; 0xf52 <gbCartridge_getRomInfo+0x272>
 f48:	93 30       	cpi	r25, 0x03	; 3
 f4a:	c9 f0       	breq	.+50     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f4c:	96 30       	cpi	r25, 0x06	; 6
 f4e:	d9 f4       	brne	.+54     	; 0xf86 <gbCartridge_getRomInfo+0x2a6>
 f50:	16 c0       	rjmp	.+44     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f52:	9d 30       	cpi	r25, 0x0D	; 13
 f54:	a1 f0       	breq	.+40     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f56:	b8 f0       	brcs	.+46     	; 0xf86 <gbCartridge_getRomInfo+0x2a6>
 f58:	21 ef       	ldi	r18, 0xF1	; 241
 f5a:	29 0f       	add	r18, r25
 f5c:	22 30       	cpi	r18, 0x02	; 2
 f5e:	98 f4       	brcc	.+38     	; 0xf86 <gbCartridge_getRomInfo+0x2a6>
 f60:	0e c0       	rjmp	.+28     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f62:	9e 31       	cpi	r25, 0x1E	; 30
 f64:	61 f0       	breq	.+24     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f66:	28 f4       	brcc	.+10     	; 0xf72 <gbCartridge_getRomInfo+0x292>
 f68:	97 31       	cpi	r25, 0x17	; 23
 f6a:	49 f0       	breq	.+18     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f6c:	9b 31       	cpi	r25, 0x1B	; 27
 f6e:	59 f4       	brne	.+22     	; 0xf86 <gbCartridge_getRomInfo+0x2a6>
 f70:	06 c0       	rjmp	.+12     	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f72:	9d 3f       	cpi	r25, 0xFD	; 253
 f74:	21 f0       	breq	.+8      	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f76:	9f 3f       	cpi	r25, 0xFF	; 255
 f78:	11 f0       	breq	.+4      	; 0xf7e <gbCartridge_getRomInfo+0x29e>
 f7a:	92 32       	cpi	r25, 0x22	; 34
 f7c:	21 f4       	brne	.+8      	; 0xf86 <gbCartridge_getRomInfo+0x2a6>
 f7e:	21 e0       	ldi	r18, 0x01	; 1
 f80:	f7 01       	movw	r30, r14
 f82:	26 8b       	std	Z+22, r18	; 0x16
 f84:	03 c0       	rjmp	.+6      	; 0xf8c <gbCartridge_getRomInfo+0x2ac>
 f86:	d7 01       	movw	r26, r14
 f88:	56 96       	adiw	r26, 0x16	; 22
 f8a:	1c 92       	st	X, r1
 f8c:	21 ef       	ldi	r18, 0xF1	; 241
 f8e:	29 0f       	add	r18, r25
 f90:	22 30       	cpi	r18, 0x02	; 2
 f92:	20 f4       	brcc	.+8      	; 0xf9c <gbCartridge_getRomInfo+0x2bc>
 f94:	21 e0       	ldi	r18, 0x01	; 1
 f96:	f7 01       	movw	r30, r14
 f98:	24 8b       	std	Z+20, r18	; 0x14
 f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <gbCartridge_getRomInfo+0x2c2>
 f9c:	d7 01       	movw	r26, r14
 f9e:	54 96       	adiw	r26, 0x14	; 20
 fa0:	1c 92       	st	X, r1
 fa2:	9c 51       	subi	r25, 0x1C	; 28
 fa4:	93 30       	cpi	r25, 0x03	; 3
 fa6:	20 f4       	brcc	.+8      	; 0xfb0 <gbCartridge_getRomInfo+0x2d0>
 fa8:	91 e0       	ldi	r25, 0x01	; 1
 faa:	f7 01       	movw	r30, r14
 fac:	95 8b       	std	Z+21, r25	; 0x15
 fae:	03 c0       	rjmp	.+6      	; 0xfb6 <gbCartridge_getRomInfo+0x2d6>
 fb0:	d7 01       	movw	r26, r14
 fb2:	55 96       	adiw	r26, 0x15	; 21
 fb4:	1c 92       	st	X, r1
 fb6:	0f 90       	pop	r0
 fb8:	df 91       	pop	r29
 fba:	cf 91       	pop	r28
 fbc:	1f 91       	pop	r17
 fbe:	0f 91       	pop	r16
 fc0:	ff 90       	pop	r15
 fc2:	ef 90       	pop	r14
 fc4:	8f 90       	pop	r8
 fc6:	7f 90       	pop	r7
 fc8:	6f 90       	pop	r6
 fca:	08 95       	ret

Disassembly of section .text.gbCartridge_switchRomBank:

00002160 <gbCartridge_switchRomBank>:

void gbCartridge_switchRomBank(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint8_t bank) {
    2160:	fc 01       	movw	r30, r24
	switch (romInfo->mbcType) {
    2162:	db 01       	movw	r26, r22
    2164:	50 96       	adiw	r26, 0x10	; 16
    2166:	9c 91       	ld	r25, X
    2168:	91 30       	cpi	r25, 0x01	; 1
    216a:	5c f0       	brlt	.+22     	; 0x2182 <gbCartridge_switchRomBank+0x22>
    216c:	94 30       	cpi	r25, 0x04	; 4
    216e:	14 f0       	brlt	.+4      	; 0x2174 <gbCartridge_switchRomBank+0x14>
    2170:	95 30       	cpi	r25, 0x05	; 5
    2172:	39 f4       	brne	.+14     	; 0x2182 <gbCartridge_switchRomBank+0x22>
    2174:	24 2f       	mov	r18, r20
		case GB_ROM_MBC_1:
		case GB_ROM_MBC_2:
		case GB_ROM_MBC_3:
		case GB_ROM_MBC_5:
			gbCartridge_write(slot, 0x2100, bank);
    2176:	bf 01       	movw	r22, r30
    2178:	80 e8       	ldi	r24, 0x80	; 128
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	51 e2       	ldi	r21, 0x21	; 33
    217e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <gbCartridge_write>
    2182:	08 95       	ret

Disassembly of section .text.cfgPort:

00001986 <cfgPort>:
	.driver.writeU16 = GPIO_METHOD_NOTSUPPORTED
};

static Gpio_Status cfgPort(GpioRegs* regs, uint8_t pinId, Gpio_Pin_Mode mode) {
	Gpio_Status status = GPIO_STATUS_INVALID_MODE;
	switch(mode) {
    1986:	41 30       	cpi	r20, 0x01	; 1
    1988:	21 f0       	breq	.+8      	; 0x1992 <cfgPort+0xc>
    198a:	88 f0       	brcs	.+34     	; 0x19ae <cfgPort+0x28>
    198c:	42 30       	cpi	r20, 0x02	; 2
    198e:	09 f1       	breq	.+66     	; 0x19d2 <cfgPort+0x4c>
    1990:	39 c0       	rjmp	.+114    	; 0x1a04 <cfgPort+0x7e>
		case GPIO_PIN_MODE_INPUT_PULLUP:
			*regs->port |= (1<<pinId); //Set Pin Value to 1
    1992:	dc 01       	movw	r26, r24
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	06 2e       	mov	r0, r22
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <cfgPort+0x1e>
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <cfgPort+0x1a>
    19a8:	30 81       	ld	r19, Z
    19aa:	23 2b       	or	r18, r19
    19ac:	20 83       	st	Z, r18
			//Drop through
		case GPIO_PIN_MODE_INPUT:
			*regs->ddr &= ~(1<<pinId); //Set Pin Direction to Input
    19ae:	dc 01       	movw	r26, r24
    19b0:	14 96       	adiw	r26, 0x04	; 4
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	15 97       	sbiw	r26, 0x05	; 5
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <cfgPort+0x3c>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	6a 95       	dec	r22
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <cfgPort+0x38>
    19c6:	80 95       	com	r24
    19c8:	90 81       	ld	r25, Z
    19ca:	89 23       	and	r24, r25
    19cc:	80 83       	st	Z, r24
			status = GPIO_STATUS_OK;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
			break;
    19d0:	08 95       	ret
		case GPIO_PIN_MODE_OUTPUT:
			*regs->port &= ~(1<<pinId); //Set Pin Value to 0
    19d2:	dc 01       	movw	r26, r24
    19d4:	ed 91       	ld	r30, X+
    19d6:	fc 91       	ld	r31, X
    19d8:	11 97       	sbiw	r26, 0x01	; 1
    19da:	21 e0       	ldi	r18, 0x01	; 1
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <cfgPort+0x5e>
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	6a 95       	dec	r22
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <cfgPort+0x5a>
    19e8:	32 2f       	mov	r19, r18
    19ea:	30 95       	com	r19
    19ec:	40 81       	ld	r20, Z
    19ee:	34 23       	and	r19, r20
    19f0:	30 83       	st	Z, r19
			*regs->ddr |=  (1<<pinId);  //Set Pin Direction to Output
    19f2:	14 96       	adiw	r26, 0x04	; 4
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	15 97       	sbiw	r26, 0x05	; 5
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2b       	or	r18, r24
    19fe:	20 83       	st	Z, r18
			status = GPIO_STATUS_OK;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1a02:	08 95       	ret
	.driver.writeU8  = _gpio_arduino_writeU8,
	.driver.writeU16 = GPIO_METHOD_NOTSUPPORTED
};

static Gpio_Status cfgPort(GpioRegs* regs, uint8_t pinId, Gpio_Pin_Mode mode) {
	Gpio_Status status = GPIO_STATUS_INVALID_MODE;
    1a04:	8e ef       	ldi	r24, 0xFE	; 254
			*regs->ddr |=  (1<<pinId);  //Set Pin Direction to Output
			status = GPIO_STATUS_OK;
			break;
	}
	return status;
}
    1a06:	08 95       	ret

Disassembly of section .text.getRegsFromGpioId:

00001bce <getRegsFromGpioId>:

static Gpio_Status getRegsFromGpioId(uint8_t gpioId, GpioRegs* regs) {
    1bce:	fb 01       	movw	r30, r22
		switch(gpioId) {
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	91 f0       	breq	.+36     	; 0x1bf8 <getRegsFromGpioId+0x2a>
    1bd4:	18 f0       	brcs	.+6      	; 0x1bdc <getRegsFromGpioId+0xe>
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	e9 f0       	breq	.+58     	; 0x1c14 <getRegsFromGpioId+0x46>
    1bda:	2a c0       	rjmp	.+84     	; 0x1c30 <getRegsFromGpioId+0x62>
			case GPIO_ARDUINO_PORT_B:
				regs->port = (uint8_t*)&PORTB;
    1bdc:	85 e2       	ldi	r24, 0x25	; 37
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
				regs->portIn = (uint8_t*)&PINB;
    1be4:	83 e2       	ldi	r24, 0x23	; 35
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	93 83       	std	Z+3, r25	; 0x03
    1bea:	82 83       	std	Z+2, r24	; 0x02
				regs->ddr = (uint8_t*)&DDRB;
    1bec:	84 e2       	ldi	r24, 0x24	; 36
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	95 83       	std	Z+5, r25	; 0x05
    1bf2:	84 83       	std	Z+4, r24	; 0x04
				regs->ddr = (uint8_t*)&DDRD;
				break;
			default:
				return GPIO_STATUS_INVALID_ID;
		}
		return GPIO_STATUS_OK;
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
		switch(gpioId) {
			case GPIO_ARDUINO_PORT_B:
				regs->port = (uint8_t*)&PORTB;
				regs->portIn = (uint8_t*)&PINB;
				regs->ddr = (uint8_t*)&DDRB;
				break;
    1bf6:	08 95       	ret
			case GPIO_ARDUINO_PORT_C:
				regs->port = (uint8_t*)&PORTC;
    1bf8:	88 e2       	ldi	r24, 0x28	; 40
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
				regs->portIn = (uint8_t*)&PINC;
    1c00:	86 e2       	ldi	r24, 0x26	; 38
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	93 83       	std	Z+3, r25	; 0x03
    1c06:	82 83       	std	Z+2, r24	; 0x02
				regs->ddr = (uint8_t*)&DDRC;
    1c08:	87 e2       	ldi	r24, 0x27	; 39
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	95 83       	std	Z+5, r25	; 0x05
    1c0e:	84 83       	std	Z+4, r24	; 0x04
				regs->ddr = (uint8_t*)&DDRD;
				break;
			default:
				return GPIO_STATUS_INVALID_ID;
		}
		return GPIO_STATUS_OK;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case GPIO_ARDUINO_PORT_C:
				regs->port = (uint8_t*)&PORTC;
				regs->portIn = (uint8_t*)&PINC;
				regs->ddr = (uint8_t*)&DDRC;
				break;
    1c12:	08 95       	ret
			case GPIO_ARDUINO_PORT_D:
				regs->port = (uint8_t*)&PORTD;
    1c14:	8b e2       	ldi	r24, 0x2B	; 43
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
				regs->portIn = (uint8_t*)&PIND;
    1c1c:	89 e2       	ldi	r24, 0x29	; 41
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	93 83       	std	Z+3, r25	; 0x03
    1c22:	82 83       	std	Z+2, r24	; 0x02
				regs->ddr = (uint8_t*)&DDRD;
    1c24:	8a e2       	ldi	r24, 0x2A	; 42
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	95 83       	std	Z+5, r25	; 0x05
    1c2a:	84 83       	std	Z+4, r24	; 0x04
				break;
			default:
				return GPIO_STATUS_INVALID_ID;
		}
		return GPIO_STATUS_OK;
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case GPIO_ARDUINO_PORT_D:
				regs->port = (uint8_t*)&PORTD;
				regs->portIn = (uint8_t*)&PIND;
				regs->ddr = (uint8_t*)&DDRD;
				break;
    1c2e:	08 95       	ret
			default:
				return GPIO_STATUS_INVALID_ID;
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return GPIO_STATUS_OK;
}
    1c32:	08 95       	ret

Disassembly of section .text._gpio_arduino_init:

00001df0 <_gpio_arduino_init>:

//pinMux API
static Gpio_Status _gpio_arduino_init(uint8_t gpioId, uint8_t pinId, Gpio_Pin_Mode pinMode) {
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <_gpio_arduino_init+0xa>
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <_gpio_arduino_init+0xc>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <_gpio_arduino_init+0xe>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	16 2f       	mov	r17, r22
    1e04:	04 2f       	mov	r16, r20
	GpioRegs regs;
	Gpio_Status status = getRegsFromGpioId(gpioId, &regs);
    1e06:	be 01       	movw	r22, r28
    1e08:	6f 5f       	subi	r22, 0xFF	; 255
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <getRegsFromGpioId>
	if(status == GPIO_STATUS_OK) {
    1e10:	81 11       	cpse	r24, r1
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <_gpio_arduino_init+0x30>
		status = cfgPort(&regs, pinId, pinMode);
    1e14:	40 2f       	mov	r20, r16
    1e16:	61 2f       	mov	r22, r17
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <cfgPort>
	}
	return status;
}
    1e20:	26 96       	adiw	r28, 0x06	; 6
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

Disassembly of section .text._gpio_arduino_readPin:

00001c94 <_gpio_arduino_readPin>:
	
//read API
static Gpio_Status _gpio_arduino_readPin(uint8_t gpioId, uint8_t pinId, uint8_t* value) {
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <_gpio_arduino_readPin+0xc>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <_gpio_arduino_readPin+0xe>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <_gpio_arduino_readPin+0x10>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	f6 2e       	mov	r15, r22
    1caa:	8a 01       	movw	r16, r20
	GpioRegs regs;
	Gpio_Status status = getRegsFromGpioId(gpioId, &regs);
    1cac:	be 01       	movw	r22, r28
    1cae:	6f 5f       	subi	r22, 0xFF	; 255
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <getRegsFromGpioId>
	if(status == GPIO_STATUS_OK) {
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	0e c0       	rjmp	.+28     	; 0x1cd6 <_gpio_arduino_readPin+0x42>
		*value = (*regs.portIn) & (1<<pinId) ? true : false;
    1cba:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbe:	20 81       	ld	r18, Z
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <_gpio_arduino_readPin+0x34>
    1cc4:	35 95       	asr	r19
    1cc6:	27 95       	ror	r18
    1cc8:	fa 94       	dec	r15
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <_gpio_arduino_readPin+0x30>
    1ccc:	91 e0       	ldi	r25, 0x01	; 1
    1cce:	20 ff       	sbrs	r18, 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	90 83       	st	Z, r25
	}
	return status;
}
    1cd6:	26 96       	adiw	r28, 0x06	; 6
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	08 95       	ret

Disassembly of section .text._gpio_arduino_readU8:

00001e7c <_gpio_arduino_readU8>:
static Gpio_Status _gpio_arduino_readU8(uint8_t gpioId, uint8_t* value) {
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <_gpio_arduino_readU8+0xa>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <_gpio_arduino_readU8+0xc>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <_gpio_arduino_readU8+0xe>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	8b 01       	movw	r16, r22
	GpioRegs regs;
	Gpio_Status status = getRegsFromGpioId(gpioId, &regs);
    1e90:	be 01       	movw	r22, r28
    1e92:	6f 5f       	subi	r22, 0xFF	; 255
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <getRegsFromGpioId>
	if(status == GPIO_STATUS_OK) {
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <_gpio_arduino_readU8+0x2c>
		*value = *regs.portIn;
    1e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea2:	90 81       	ld	r25, Z
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	90 83       	st	Z, r25
	}
	return status;
}
    1ea8:	26 96       	adiw	r28, 0x06	; 6
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

Disassembly of section .text._gpio_arduino_writePin:

00001a80 <_gpio_arduino_writePin>:
	
//write API
static Gpio_Status _gpio_arduino_writePin(uint8_t gpioId, uint8_t pinId, uint8_t value) {
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <_gpio_arduino_writePin+0xa>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <_gpio_arduino_writePin+0xc>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <_gpio_arduino_writePin+0xe>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	06 2f       	mov	r16, r22
    1a94:	14 2f       	mov	r17, r20
	GpioRegs regs;
	Gpio_Status status = getRegsFromGpioId(gpioId, &regs);
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <getRegsFromGpioId>
	if(status == GPIO_STATUS_OK) {
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	1c c0       	rjmp	.+56     	; 0x1adc <_gpio_arduino_writePin+0x5c>
		if(value) {
    1aa4:	11 23       	and	r17, r17
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <_gpio_arduino_writePin+0x42>
			*regs.port |= (1<<pinId);
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <_gpio_arduino_writePin+0x36>
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	0a 95       	dec	r16
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <_gpio_arduino_writePin+0x32>
    1aba:	90 81       	ld	r25, Z
    1abc:	29 2b       	or	r18, r25
    1abe:	20 83       	st	Z, r18
    1ac0:	0d c0       	rjmp	.+26     	; 0x1adc <_gpio_arduino_writePin+0x5c>
		} else {
			*regs.port &= ~(1<<pinId);
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <_gpio_arduino_writePin+0x50>
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	0a 95       	dec	r16
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <_gpio_arduino_writePin+0x4c>
    1ad4:	20 95       	com	r18
    1ad6:	90 81       	ld	r25, Z
    1ad8:	29 23       	and	r18, r25
    1ada:	20 83       	st	Z, r18
		}
	}
	return status;
}
    1adc:	26 96       	adiw	r28, 0x06	; 6
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

Disassembly of section .text._gpio_arduino_writeU8:

00001efc <_gpio_arduino_writeU8>:
static Gpio_Status _gpio_arduino_writeU8(uint8_t gpioId, uint8_t value) {
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <_gpio_arduino_writeU8+0x8>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <_gpio_arduino_writeU8+0xa>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <_gpio_arduino_writeU8+0xc>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	16 2f       	mov	r17, r22
	GpioRegs regs;
	Gpio_Status status = getRegsFromGpioId(gpioId, &regs);
    1f0e:	be 01       	movw	r22, r28
    1f10:	6f 5f       	subi	r22, 0xFF	; 255
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <getRegsFromGpioId>
	if(status == GPIO_STATUS_OK) {
    1f18:	81 11       	cpse	r24, r1
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <_gpio_arduino_writeU8+0x26>
		*regs.port = value;
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	10 83       	st	Z, r17
	}
	return status;
    1f22:	26 96       	adiw	r28, 0x06	; 6
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	08 95       	ret

Disassembly of section .text.newInstance:

00001ebe <newInstance>:

Hcf4099be_Handle hcf4099be_handles[HCF4099BE_MAX_INSTANCES] = {0};
	
static uint8_t newInstance() {
	uint8_t n;
	for(n=0;n<sizeof(hcf4099be_handles)/sizeof(Hcf4099be_Handle);n++) {
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	19 c0       	rjmp	.+50     	; 0x1ef4 <newInstance+0x36>
		if(hcf4099be_handles[n].active == 0) {
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	9d e0       	ldi	r25, 0x0D	; 13
    1ec8:	92 9f       	mul	r25, r18
    1eca:	f0 01       	movw	r30, r0
    1ecc:	93 9f       	mul	r25, r19
    1ece:	f0 0d       	add	r31, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	e0 57       	subi	r30, 0x70	; 112
    1ed4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed6:	90 81       	ld	r25, Z
    1ed8:	91 11       	cpse	r25, r1
    1eda:	0b c0       	rjmp	.+22     	; 0x1ef2 <newInstance+0x34>
			hcf4099be_handles[n].active = true;
    1edc:	9d e0       	ldi	r25, 0x0D	; 13
    1ede:	92 9f       	mul	r25, r18
    1ee0:	f0 01       	movw	r30, r0
    1ee2:	93 9f       	mul	r25, r19
    1ee4:	f0 0d       	add	r31, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	e0 57       	subi	r30, 0x70	; 112
    1eea:	fc 4f       	sbci	r31, 0xFC	; 252
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	90 83       	st	Z, r25
			return n;
    1ef0:	08 95       	ret

Hcf4099be_Handle hcf4099be_handles[HCF4099BE_MAX_INSTANCES] = {0};
	
static uint8_t newInstance() {
	uint8_t n;
	for(n=0;n<sizeof(hcf4099be_handles)/sizeof(Hcf4099be_Handle);n++) {
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	28 f3       	brcs	.-54     	; 0x1ec2 <newInstance+0x4>
		if(hcf4099be_handles[n].active == 0) {
			hcf4099be_handles[n].active = true;
			return n;
		}
	}
	return 0xff;
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
}
    1efa:	08 95       	ret

Disassembly of section .text._gpio_hcf4099be_writeU8:

00001432 <_gpio_hcf4099be_writeU8>:
static Gpio_Status _gpio_hcf4099be_writePin(uint8_t gpioId, uint8_t pinId, uint8_t value) {
	//hcf4099be dummy
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
}
*/
static Gpio_Status _gpio_hcf4099be_writeU8(uint8_t gpioId, uint8_t value) {
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
	Gpio_Status status = GPIO_STATUS_OK;
	int n;
	int addr = 0;
	if(gpioId > sizeof(hcf4099be_handles)/sizeof(Hcf4099be_Handle)) {
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	08 f0       	brcs	.+2      	; 0x144a <_gpio_hcf4099be_writeU8+0x18>
    1448:	76 c0       	rjmp	.+236    	; 0x1536 <_gpio_hcf4099be_writeU8+0x104>
    144a:	c6 2e       	mov	r12, r22
    144c:	d8 2e       	mov	r13, r24
    144e:	c0 e0       	ldi	r28, 0x00	; 0
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	01 e0       	ldi	r16, 0x01	; 1
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	69 c0       	rjmp	.+210    	; 0x152c <_gpio_hcf4099be_writeU8+0xfa>
		return GPIO_STATUS_INVALID_ID;
	}
	for (n = 1; n < 0xff; n = n << 1) {
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.a0, addr & 0x01)) != GPIO_STATUS_OK) return status;
    145a:	ed 2c       	mov	r14, r13
    145c:	f1 2c       	mov	r15, r1
    145e:	8d e0       	ldi	r24, 0x0D	; 13
    1460:	8e 9d       	mul	r24, r14
    1462:	f0 01       	movw	r30, r0
    1464:	8f 9d       	mul	r24, r15
    1466:	f0 0d       	add	r31, r0
    1468:	11 24       	eor	r1, r1
    146a:	e0 57       	subi	r30, 0x70	; 112
    146c:	fc 4f       	sbci	r31, 0xFC	; 252
    146e:	6c 2f       	mov	r22, r28
    1470:	61 70       	andi	r22, 0x01	; 1
    1472:	87 81       	ldd	r24, Z+7	; 0x07
    1474:	90 85       	ldd	r25, Z+8	; 0x08
    1476:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    147a:	81 11       	cpse	r24, r1
    147c:	5d c0       	rjmp	.+186    	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.a1, addr & 0x02)) != GPIO_STATUS_OK) return status;
    147e:	8d e0       	ldi	r24, 0x0D	; 13
    1480:	8e 9d       	mul	r24, r14
    1482:	f0 01       	movw	r30, r0
    1484:	8f 9d       	mul	r24, r15
    1486:	f0 0d       	add	r31, r0
    1488:	11 24       	eor	r1, r1
    148a:	e0 57       	subi	r30, 0x70	; 112
    148c:	fc 4f       	sbci	r31, 0xFC	; 252
    148e:	6c 2f       	mov	r22, r28
    1490:	62 70       	andi	r22, 0x02	; 2
    1492:	81 85       	ldd	r24, Z+9	; 0x09
    1494:	92 85       	ldd	r25, Z+10	; 0x0a
    1496:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    149a:	81 11       	cpse	r24, r1
    149c:	4d c0       	rjmp	.+154    	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.a2, addr & 0x04)) != GPIO_STATUS_OK) return status;
    149e:	6c 2f       	mov	r22, r28
    14a0:	64 70       	andi	r22, 0x04	; 4
    14a2:	8d e0       	ldi	r24, 0x0D	; 13
    14a4:	8e 9d       	mul	r24, r14
    14a6:	f0 01       	movw	r30, r0
    14a8:	8f 9d       	mul	r24, r15
    14aa:	f0 0d       	add	r31, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	e0 57       	subi	r30, 0x70	; 112
    14b0:	fc 4f       	sbci	r31, 0xFC	; 252
    14b2:	83 85       	ldd	r24, Z+11	; 0x0b
    14b4:	94 85       	ldd	r25, Z+12	; 0x0c
    14b6:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    14ba:	81 11       	cpse	r24, r1
    14bc:	3d c0       	rjmp	.+122    	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.data, value & n)) != GPIO_STATUS_OK) return status;
    14be:	8d e0       	ldi	r24, 0x0D	; 13
    14c0:	8e 9d       	mul	r24, r14
    14c2:	f0 01       	movw	r30, r0
    14c4:	8f 9d       	mul	r24, r15
    14c6:	f0 0d       	add	r31, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	e0 57       	subi	r30, 0x70	; 112
    14cc:	fc 4f       	sbci	r31, 0xFC	; 252
    14ce:	6c 2d       	mov	r22, r12
    14d0:	60 23       	and	r22, r16
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	92 81       	ldd	r25, Z+2	; 0x02
    14d6:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    14da:	81 11       	cpse	r24, r1
    14dc:	2d c0       	rjmp	.+90     	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.writede, false)) != GPIO_STATUS_OK) return status;
    14de:	8d e0       	ldi	r24, 0x0D	; 13
    14e0:	8e 9d       	mul	r24, r14
    14e2:	f0 01       	movw	r30, r0
    14e4:	8f 9d       	mul	r24, r15
    14e6:	f0 0d       	add	r31, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	e0 57       	subi	r30, 0x70	; 112
    14ec:	fc 4f       	sbci	r31, 0xFC	; 252
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	83 81       	ldd	r24, Z+3	; 0x03
    14f2:	94 81       	ldd	r25, Z+4	; 0x04
    14f4:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    14f8:	81 11       	cpse	r24, r1
    14fa:	1e c0       	rjmp	.+60     	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14fc:	8f e9       	ldi	r24, 0x9F	; 159
    14fe:	9f e0       	ldi	r25, 0x0F	; 15
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <_gpio_hcf4099be_writeU8+0xce>
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <_gpio_hcf4099be_writeU8+0xd4>
    1506:	00 00       	nop
		_delay_ms(1);
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.writede, true)) != GPIO_STATUS_OK) return status;
    1508:	8d e0       	ldi	r24, 0x0D	; 13
    150a:	8e 9d       	mul	r24, r14
    150c:	f0 01       	movw	r30, r0
    150e:	8f 9d       	mul	r24, r15
    1510:	f0 0d       	add	r31, r0
    1512:	11 24       	eor	r1, r1
    1514:	e0 57       	subi	r30, 0x70	; 112
    1516:	fc 4f       	sbci	r31, 0xFC	; 252
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	83 81       	ldd	r24, Z+3	; 0x03
    151c:	94 81       	ldd	r25, Z+4	; 0x04
    151e:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1522:	81 11       	cpse	r24, r1
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
		addr++;
    1526:	21 96       	adiw	r28, 0x01	; 1
	int n;
	int addr = 0;
	if(gpioId > sizeof(hcf4099be_handles)/sizeof(Hcf4099be_Handle)) {
		return GPIO_STATUS_INVALID_ID;
	}
	for (n = 1; n < 0xff; n = n << 1) {
    1528:	00 0f       	add	r16, r16
    152a:	11 1f       	adc	r17, r17
    152c:	0f 3f       	cpi	r16, 0xFF	; 255
    152e:	11 05       	cpc	r17, r1
    1530:	0c f4       	brge	.+2      	; 0x1534 <_gpio_hcf4099be_writeU8+0x102>
    1532:	93 cf       	rjmp	.-218    	; 0x145a <_gpio_hcf4099be_writeU8+0x28>
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <_gpio_hcf4099be_writeU8+0x106>
static Gpio_Status _gpio_hcf4099be_writeU8(uint8_t gpioId, uint8_t value) {
	Gpio_Status status = GPIO_STATUS_OK;
	int n;
	int addr = 0;
	if(gpioId > sizeof(hcf4099be_handles)/sizeof(Hcf4099be_Handle)) {
		return GPIO_STATUS_INVALID_ID;
    1536:	8f ef       	ldi	r24, 0xFF	; 255
		_delay_ms(1);
		if((status = gpioWritePin(hcf4099be_handles[gpioId].latchIO.writede, true)) != GPIO_STATUS_OK) return status;
		addr++;
	}
	return status;
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	08 95       	ret

Disassembly of section .text.hcf4099be_create:

00000fcc <hcf4099be_create>:
	}
	return 0xff;
}

//Returns gpioId
uint8_t hcf4099be_create(Gpio_Pin* data, Gpio_Pin* writede, Gpio_Pin* read, Gpio_Pin* a0, Gpio_Pin* a1, Gpio_Pin* a2) {
     fcc:	5f 92       	push	r5
     fce:	6f 92       	push	r6
     fd0:	7f 92       	push	r7
     fd2:	8f 92       	push	r8
     fd4:	9f 92       	push	r9
     fd6:	af 92       	push	r10
     fd8:	bf 92       	push	r11
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
     fec:	5b 01       	movw	r10, r22
     fee:	4a 01       	movw	r8, r20
     ff0:	39 01       	movw	r6, r18
	uint8_t gpioId = newInstance();
     ff2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <newInstance>
     ff6:	58 2e       	mov	r5, r24
	if(gpioId < 0xff) {
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	58 16       	cp	r5, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <hcf4099be_create+0x34>
     ffe:	cc c0       	rjmp	.+408    	; 0x1198 <hcf4099be_create+0x1cc>
		hcf4099be_handles[gpioId].latchIO.data = data;
    1000:	c5 2c       	mov	r12, r5
    1002:	d1 2c       	mov	r13, r1
    1004:	8d e0       	ldi	r24, 0x0D	; 13
    1006:	8c 9d       	mul	r24, r12
    1008:	f0 01       	movw	r30, r0
    100a:	8d 9d       	mul	r24, r13
    100c:	f0 0d       	add	r31, r0
    100e:	11 24       	eor	r1, r1
    1010:	e0 57       	subi	r30, 0x70	; 112
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	d2 83       	std	Z+2, r29	; 0x02
    1016:	c1 83       	std	Z+1, r28	; 0x01
		hcf4099be_handles[gpioId].latchIO.writede = writede;
    1018:	b4 82       	std	Z+4, r11	; 0x04
    101a:	a3 82       	std	Z+3, r10	; 0x03
		hcf4099be_handles[gpioId].latchIO.read = read;
    101c:	96 82       	std	Z+6, r9	; 0x06
    101e:	85 82       	std	Z+5, r8	; 0x05
		hcf4099be_handles[gpioId].latchIO.a0 = a0;
    1020:	70 86       	std	Z+8, r7	; 0x08
    1022:	67 82       	std	Z+7, r6	; 0x07
		hcf4099be_handles[gpioId].latchIO.a1 = a1;
    1024:	12 87       	std	Z+10, r17	; 0x0a
    1026:	01 87       	std	Z+9, r16	; 0x09
		hcf4099be_handles[gpioId].latchIO.a2 = a2;
    1028:	f4 86       	std	Z+12, r15	; 0x0c
    102a:	e3 86       	std	Z+11, r14	; 0x0b
		
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.data, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    102c:	62 e0       	ldi	r22, 0x02	; 2
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1034:	81 11       	cpse	r24, r1
    1036:	a5 c0       	rjmp	.+330    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.writede, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    1038:	8d e0       	ldi	r24, 0x0D	; 13
    103a:	8c 9d       	mul	r24, r12
    103c:	f0 01       	movw	r30, r0
    103e:	8d 9d       	mul	r24, r13
    1040:	f0 0d       	add	r31, r0
    1042:	11 24       	eor	r1, r1
    1044:	e0 57       	subi	r30, 0x70	; 112
    1046:	fc 4f       	sbci	r31, 0xFC	; 252
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	94 81       	ldd	r25, Z+4	; 0x04
    104e:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1052:	81 11       	cpse	r24, r1
    1054:	96 c0       	rjmp	.+300    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.read, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    1056:	8d e0       	ldi	r24, 0x0D	; 13
    1058:	8c 9d       	mul	r24, r12
    105a:	f0 01       	movw	r30, r0
    105c:	8d 9d       	mul	r24, r13
    105e:	f0 0d       	add	r31, r0
    1060:	11 24       	eor	r1, r1
    1062:	e0 57       	subi	r30, 0x70	; 112
    1064:	fc 4f       	sbci	r31, 0xFC	; 252
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	85 81       	ldd	r24, Z+5	; 0x05
    106a:	96 81       	ldd	r25, Z+6	; 0x06
    106c:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    1070:	81 11       	cpse	r24, r1
    1072:	87 c0       	rjmp	.+270    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.a0, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    1074:	8d e0       	ldi	r24, 0x0D	; 13
    1076:	8c 9d       	mul	r24, r12
    1078:	f0 01       	movw	r30, r0
    107a:	8d 9d       	mul	r24, r13
    107c:	f0 0d       	add	r31, r0
    107e:	11 24       	eor	r1, r1
    1080:	e0 57       	subi	r30, 0x70	; 112
    1082:	fc 4f       	sbci	r31, 0xFC	; 252
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	87 81       	ldd	r24, Z+7	; 0x07
    1088:	90 85       	ldd	r25, Z+8	; 0x08
    108a:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    108e:	81 11       	cpse	r24, r1
    1090:	78 c0       	rjmp	.+240    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.a1, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    1092:	8d e0       	ldi	r24, 0x0D	; 13
    1094:	8c 9d       	mul	r24, r12
    1096:	f0 01       	movw	r30, r0
    1098:	8d 9d       	mul	r24, r13
    109a:	f0 0d       	add	r31, r0
    109c:	11 24       	eor	r1, r1
    109e:	e0 57       	subi	r30, 0x70	; 112
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	62 e0       	ldi	r22, 0x02	; 2
    10a4:	81 85       	ldd	r24, Z+9	; 0x09
    10a6:	92 85       	ldd	r25, Z+10	; 0x0a
    10a8:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    10ac:	81 11       	cpse	r24, r1
    10ae:	69 c0       	rjmp	.+210    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioInit(hcf4099be_handles[gpioId].latchIO.a2, GPIO_PIN_MODE_OUTPUT))) goto hcf4099be_create_error;
    10b0:	8d e0       	ldi	r24, 0x0D	; 13
    10b2:	8c 9d       	mul	r24, r12
    10b4:	f0 01       	movw	r30, r0
    10b6:	8d 9d       	mul	r24, r13
    10b8:	f0 0d       	add	r31, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	e0 57       	subi	r30, 0x70	; 112
    10be:	fc 4f       	sbci	r31, 0xFC	; 252
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	83 85       	ldd	r24, Z+11	; 0x0b
    10c4:	94 85       	ldd	r25, Z+12	; 0x0c
    10c6:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
    10ca:	81 11       	cpse	r24, r1
    10cc:	5a c0       	rjmp	.+180    	; 0x1182 <hcf4099be_create+0x1b6>
		
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.data, false))) goto hcf4099be_create_error;
    10ce:	8d e0       	ldi	r24, 0x0D	; 13
    10d0:	8c 9d       	mul	r24, r12
    10d2:	f0 01       	movw	r30, r0
    10d4:	8d 9d       	mul	r24, r13
    10d6:	f0 0d       	add	r31, r0
    10d8:	11 24       	eor	r1, r1
    10da:	e0 57       	subi	r30, 0x70	; 112
    10dc:	fc 4f       	sbci	r31, 0xFC	; 252
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	81 81       	ldd	r24, Z+1	; 0x01
    10e2:	92 81       	ldd	r25, Z+2	; 0x02
    10e4:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    10e8:	81 11       	cpse	r24, r1
    10ea:	4b c0       	rjmp	.+150    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.writede, true))) goto hcf4099be_create_error;
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	8c 9d       	mul	r24, r12
    10f0:	f0 01       	movw	r30, r0
    10f2:	8d 9d       	mul	r24, r13
    10f4:	f0 0d       	add	r31, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	e0 57       	subi	r30, 0x70	; 112
    10fa:	fc 4f       	sbci	r31, 0xFC	; 252
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	83 81       	ldd	r24, Z+3	; 0x03
    1100:	94 81       	ldd	r25, Z+4	; 0x04
    1102:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1106:	81 11       	cpse	r24, r1
    1108:	3c c0       	rjmp	.+120    	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.read, false))) goto hcf4099be_create_error;
    110a:	8d e0       	ldi	r24, 0x0D	; 13
    110c:	8c 9d       	mul	r24, r12
    110e:	f0 01       	movw	r30, r0
    1110:	8d 9d       	mul	r24, r13
    1112:	f0 0d       	add	r31, r0
    1114:	11 24       	eor	r1, r1
    1116:	e0 57       	subi	r30, 0x70	; 112
    1118:	fc 4f       	sbci	r31, 0xFC	; 252
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	85 81       	ldd	r24, Z+5	; 0x05
    111e:	96 81       	ldd	r25, Z+6	; 0x06
    1120:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1124:	81 11       	cpse	r24, r1
    1126:	2d c0       	rjmp	.+90     	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a0, false))) goto hcf4099be_create_error;
    1128:	8d e0       	ldi	r24, 0x0D	; 13
    112a:	8c 9d       	mul	r24, r12
    112c:	f0 01       	movw	r30, r0
    112e:	8d 9d       	mul	r24, r13
    1130:	f0 0d       	add	r31, r0
    1132:	11 24       	eor	r1, r1
    1134:	e0 57       	subi	r30, 0x70	; 112
    1136:	fc 4f       	sbci	r31, 0xFC	; 252
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	87 81       	ldd	r24, Z+7	; 0x07
    113c:	90 85       	ldd	r25, Z+8	; 0x08
    113e:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1142:	81 11       	cpse	r24, r1
    1144:	1e c0       	rjmp	.+60     	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a1, false))) goto hcf4099be_create_error;
    1146:	8d e0       	ldi	r24, 0x0D	; 13
    1148:	8c 9d       	mul	r24, r12
    114a:	f0 01       	movw	r30, r0
    114c:	8d 9d       	mul	r24, r13
    114e:	f0 0d       	add	r31, r0
    1150:	11 24       	eor	r1, r1
    1152:	e0 57       	subi	r30, 0x70	; 112
    1154:	fc 4f       	sbci	r31, 0xFC	; 252
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	81 85       	ldd	r24, Z+9	; 0x09
    115a:	92 85       	ldd	r25, Z+10	; 0x0a
    115c:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1160:	81 11       	cpse	r24, r1
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <hcf4099be_create+0x1b6>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a2, false))) goto hcf4099be_create_error;
    1164:	8d e0       	ldi	r24, 0x0D	; 13
    1166:	8c 9d       	mul	r24, r12
    1168:	f0 01       	movw	r30, r0
    116a:	8d 9d       	mul	r24, r13
    116c:	f0 0d       	add	r31, r0
    116e:	11 24       	eor	r1, r1
    1170:	e0 57       	subi	r30, 0x70	; 112
    1172:	fc 4f       	sbci	r31, 0xFC	; 252
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	83 85       	ldd	r24, Z+11	; 0x0b
    1178:	94 85       	ldd	r25, Z+12	; 0x0c
    117a:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    117e:	88 23       	and	r24, r24
    1180:	69 f0       	breq	.+26     	; 0x119c <hcf4099be_create+0x1d0>
	}
	return gpioId;
hcf4099be_create_error:
	hcf4099be_handles[gpioId].active = false;
    1182:	8d e0       	ldi	r24, 0x0D	; 13
    1184:	8c 9d       	mul	r24, r12
    1186:	f0 01       	movw	r30, r0
    1188:	8d 9d       	mul	r24, r13
    118a:	f0 0d       	add	r31, r0
    118c:	11 24       	eor	r1, r1
    118e:	e0 57       	subi	r30, 0x70	; 112
    1190:	fc 4f       	sbci	r31, 0xFC	; 252
    1192:	10 82       	st	Z, r1
	return 0xff;
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	03 c0       	rjmp	.+6      	; 0x119e <hcf4099be_create+0x1d2>
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.read, false))) goto hcf4099be_create_error;
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a0, false))) goto hcf4099be_create_error;
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a1, false))) goto hcf4099be_create_error;
		if(GPIO_STATUS_OK != (gpioWritePin(hcf4099be_handles[gpioId].latchIO.a2, false))) goto hcf4099be_create_error;
	}
	return gpioId;
    1198:	85 2d       	mov	r24, r5
    119a:	01 c0       	rjmp	.+2      	; 0x119e <hcf4099be_create+0x1d2>
    119c:	85 2d       	mov	r24, r5
hcf4099be_create_error:
	hcf4099be_handles[gpioId].active = false;
	return 0xff;
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	08 95       	ret

Disassembly of section .text.gpioInit:

000020ae <gpioInit>:
 */ 

#include "gpio.h"

Gpio_Status gpioInit(Gpio_Pin *pin, Gpio_Pin_Mode pinMode) {
	if (pin && pin->port.handle->driver.init) {
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	89 f0       	breq	.+34     	; 0x20d4 <gpioInit+0x26>
    20b2:	dc 01       	movw	r26, r24
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	11 97       	sbiw	r26, 0x01	; 1
    20ba:	01 90       	ld	r0, Z+
    20bc:	f0 81       	ld	r31, Z
    20be:	e0 2d       	mov	r30, r0
    20c0:	30 97       	sbiw	r30, 0x00	; 0
    20c2:	51 f0       	breq	.+20     	; 0x20d8 <gpioInit+0x2a>
    20c4:	46 2f       	mov	r20, r22
		return pin->port.handle->driver.init(pin->port.gpioId, pin->pinId, pinMode);
    20c6:	13 96       	adiw	r26, 0x03	; 3
    20c8:	6c 91       	ld	r22, X
    20ca:	13 97       	sbiw	r26, 0x03	; 3
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	8c 91       	ld	r24, X
    20d0:	09 95       	icall
    20d2:	08 95       	ret
	}
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
    20d4:	8d ef       	ldi	r24, 0xFD	; 253
    20d6:	08 95       	ret
    20d8:	8d ef       	ldi	r24, 0xFD	; 253
}
    20da:	08 95       	ret

Disassembly of section .text.gpioReadPin:

000020dc <gpioReadPin>:
Gpio_Status gpioReadPin(Gpio_Pin *pin, uint8_t* value) {
	if (pin && pin->port.handle->driver.readPin) {
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	89 f0       	breq	.+34     	; 0x2102 <gpioReadPin+0x26>
    20e0:	dc 01       	movw	r26, r24
    20e2:	ed 91       	ld	r30, X+
    20e4:	fc 91       	ld	r31, X
    20e6:	11 97       	sbiw	r26, 0x01	; 1
    20e8:	02 80       	ldd	r0, Z+2	; 0x02
    20ea:	f3 81       	ldd	r31, Z+3	; 0x03
    20ec:	e0 2d       	mov	r30, r0
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	51 f0       	breq	.+20     	; 0x2106 <gpioReadPin+0x2a>
    20f2:	ab 01       	movw	r20, r22
		return pin->port.handle->driver.readPin(pin->port.gpioId, pin->pinId, value);
    20f4:	13 96       	adiw	r26, 0x03	; 3
    20f6:	6c 91       	ld	r22, X
    20f8:	13 97       	sbiw	r26, 0x03	; 3
    20fa:	12 96       	adiw	r26, 0x02	; 2
    20fc:	8c 91       	ld	r24, X
    20fe:	09 95       	icall
    2100:	08 95       	ret
	}
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
    2102:	8d ef       	ldi	r24, 0xFD	; 253
    2104:	08 95       	ret
    2106:	8d ef       	ldi	r24, 0xFD	; 253
}
    2108:	08 95       	ret

Disassembly of section .text.gpioWritePin:

0000204a <gpioWritePin>:
		return handle->driver.readU16(gpioId, value);
	}
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
}
Gpio_Status gpioWritePin(Gpio_Pin *pin, uint8_t value) {
	if (pin && pin->port.handle->driver.writePin) {
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	a1 f0       	breq	.+40     	; 0x2076 <gpioWritePin+0x2c>
    204e:	dc 01       	movw	r26, r24
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	00 84       	ldd	r0, Z+8	; 0x08
    2056:	f1 85       	ldd	r31, Z+9	; 0x09
    2058:	e0 2d       	mov	r30, r0
    205a:	30 97       	sbiw	r30, 0x00	; 0
    205c:	71 f0       	breq	.+28     	; 0x207a <gpioWritePin+0x30>
		return pin->port.handle->driver.writePin(pin->port.gpioId, pin->pinId, value ? true : false);
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	61 11       	cpse	r22, r1
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <gpioWritePin+0x1c>
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	dc 01       	movw	r26, r24
    2068:	13 96       	adiw	r26, 0x03	; 3
    206a:	6c 91       	ld	r22, X
    206c:	13 97       	sbiw	r26, 0x03	; 3
    206e:	12 96       	adiw	r26, 0x02	; 2
    2070:	8c 91       	ld	r24, X
    2072:	09 95       	icall
    2074:	08 95       	ret
	}
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
    2076:	8d ef       	ldi	r24, 0xFD	; 253
    2078:	08 95       	ret
    207a:	8d ef       	ldi	r24, 0xFD	; 253
}
    207c:	08 95       	ret

Disassembly of section .text.gpioWriteU8:

00002184 <gpioWriteU8>:
Gpio_Status gpioWriteU8(Gpio_Handle* handle, uint8_t gpioId, uint8_t value) {
    2184:	26 2f       	mov	r18, r22
	if (handle->driver.writeU8) {
    2186:	dc 01       	movw	r26, r24
    2188:	1a 96       	adiw	r26, 0x0a	; 10
    218a:	ed 91       	ld	r30, X+
    218c:	fc 91       	ld	r31, X
    218e:	1b 97       	sbiw	r26, 0x0b	; 11
    2190:	30 97       	sbiw	r30, 0x00	; 0
    2192:	21 f0       	breq	.+8      	; 0x219c <gpioWriteU8+0x18>
    2194:	64 2f       	mov	r22, r20
    2196:	82 2f       	mov	r24, r18
		return handle->driver.writeU8(gpioId, value);
    2198:	09 95       	icall
    219a:	08 95       	ret
	}
	return GPIO_STATUS_METHOD_NOT_SUPPORTED;
    219c:	8d ef       	ldi	r24, 0xFD	; 253
}
    219e:	08 95       	ret

Disassembly of section .text.main:

00001310 <main>:
    1310:	2f ef       	ldi	r18, 0xFF	; 255
    1312:	81 ee       	ldi	r24, 0xE1	; 225
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	21 50       	subi	r18, 0x01	; 1
    1318:	80 40       	sbci	r24, 0x00	; 0
    131a:	90 40       	sbci	r25, 0x00	; 0
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0x6>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <main+0x10>
    1320:	00 00       	nop

int main(void)
{
	int state = 0;
	_delay_ms(100); //delay to give prevent problems with avrdude
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
    1322:	87 e6       	ldi	r24, 0x67	; 103
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <uart_init>
	sei();
    132a:	78 94       	sei
	
	slot.addr_low.handle = &gpio_hcf4099be;
    132c:	ca ea       	ldi	r28, 0xAA	; 170
    132e:	d3 e0       	ldi	r29, 0x03	; 3
    1330:	0f 2e       	mov	r0, r31
    1332:	f2 ed       	ldi	r31, 0xD2	; 210
    1334:	cf 2e       	mov	r12, r31
    1336:	f3 e0       	ldi	r31, 0x03	; 3
    1338:	df 2e       	mov	r13, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	d9 82       	std	Y+1, r13	; 0x01
    133e:	c8 82       	st	Y, r12
	slot.addr_low.gpioId = hcf4099be_create(&D5, &D7, &D6, &D2, &D3, &D4);
    1340:	0f 2e       	mov	r0, r31
    1342:	fc e1       	ldi	r31, 0x1C	; 28
    1344:	ef 2e       	mov	r14, r31
    1346:	f4 e0       	ldi	r31, 0x04	; 4
    1348:	ff 2e       	mov	r15, r31
    134a:	f0 2d       	mov	r31, r0
    134c:	00 e2       	ldi	r16, 0x20	; 32
    134e:	14 e0       	ldi	r17, 0x04	; 4
    1350:	24 e2       	ldi	r18, 0x24	; 36
    1352:	34 e0       	ldi	r19, 0x04	; 4
    1354:	44 e1       	ldi	r20, 0x14	; 20
    1356:	54 e0       	ldi	r21, 0x04	; 4
    1358:	60 e1       	ldi	r22, 0x10	; 16
    135a:	74 e0       	ldi	r23, 0x04	; 4
    135c:	88 e1       	ldi	r24, 0x18	; 24
    135e:	94 e0       	ldi	r25, 0x04	; 4
    1360:	0e 94 e6 07 	call	0xfcc	; 0xfcc <hcf4099be_create>
    1364:	8a 83       	std	Y+2, r24	; 0x02
	slot.addr_high.handle = &gpio_hcf4099be;
    1366:	dc 82       	std	Y+4, r13	; 0x04
    1368:	cb 82       	std	Y+3, r12	; 0x03
	slot.addr_high.gpioId = hcf4099be_create(&D5, &D8, &D6, &D2, &D3, &D4);
    136a:	24 e2       	ldi	r18, 0x24	; 36
    136c:	34 e0       	ldi	r19, 0x04	; 4
    136e:	44 e1       	ldi	r20, 0x14	; 20
    1370:	54 e0       	ldi	r21, 0x04	; 4
    1372:	6c e0       	ldi	r22, 0x0C	; 12
    1374:	74 e0       	ldi	r23, 0x04	; 4
    1376:	88 e1       	ldi	r24, 0x18	; 24
    1378:	94 e0       	ldi	r25, 0x04	; 4
    137a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <hcf4099be_create>
    137e:	8d 83       	std	Y+5, r24	; 0x05
	gbCartridge_init(&slot);
    1380:	ce 01       	movw	r24, r28
    1382:	0e 94 87 0b 	call	0x170e	; 0x170e <gbCartridge_init>
	
	gpioInit(&D13, GPIO_PIN_MODE_OUTPUT);
    1386:	62 e0       	ldi	r22, 0x02	; 2
    1388:	88 ef       	ldi	r24, 0xF8	; 248
    138a:	93 e0       	ldi	r25, 0x03	; 3
    138c:	0e 94 57 10 	call	0x20ae	; 0x20ae <gpioInit>
	gpioWritePin(&D13, false);
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	88 ef       	ldi	r24, 0xF8	; 248
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
	
    while(1)
    {
		if(gbCartridge_isPressent(&slot) && gbCartridge_isChecksumValid(&slot)) {
    139a:	8a ea       	ldi	r24, 0xAA	; 170
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	6c 01       	movw	r12, r24
    13a0:	20 e8       	ldi	r18, 0x80	; 128
    13a2:	e2 2e       	mov	r14, r18
    13a4:	8e 2d       	mov	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	0e 94 2e 0c 	call	0x185c	; 0x185c <gbCartridge_isPressent>
    13ac:	88 23       	and	r24, r24
    13ae:	d9 f1       	breq	.+118    	; 0x1426 <main+0x116>
    13b0:	8e 2d       	mov	r24, r14
    13b2:	b6 01       	movw	r22, r12
    13b4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <gbCartridge_isChecksumValid>
    13b8:	88 23       	and	r24, r24
    13ba:	a9 f1       	breq	.+106    	; 0x1426 <main+0x116>
			gpioWritePin(&D13, true);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	88 ef       	ldi	r24, 0xF8	; 248
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
			gbCartridge_getRomInfo(&slot, &romInfo);
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	51 e0       	ldi	r21, 0x01	; 1
    13ca:	8e 2d       	mov	r24, r14
    13cc:	b6 01       	movw	r22, r12
    13ce:	0e 94 70 06 	call	0xce0	; 0xce0 <gbCartridge_getRomInfo>
			state = xcom_cartridge_detect(&romInfo);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 3f 10 	call	0x207e	; 0x207e <xcom_cartridge_detect>
			if(state < 0) {
    13da:	77 23       	and	r23, r23
    13dc:	54 f4       	brge	.+20     	; 0x13f2 <main+0xe2>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	99 e6       	ldi	r25, 0x69	; 105
    13e2:	28 e1       	ldi	r18, 0x18	; 24
    13e4:	81 50       	subi	r24, 0x01	; 1
    13e6:	90 40       	sbci	r25, 0x00	; 0
    13e8:	20 40       	sbci	r18, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <main+0xd4>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <main+0xde>
    13ee:	00 00       	nop
    13f0:	d4 cf       	rjmp	.-88     	; 0x139a <main+0x8a>
				_delay_ms(500);
			} else {
				state = xcom_do_cartridgeAction(&slot, &romInfo, 10000);
    13f2:	20 e1       	ldi	r18, 0x10	; 16
    13f4:	37 e2       	ldi	r19, 0x27	; 39
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	71 e0       	ldi	r23, 0x01	; 1
    13fe:	8a ea       	ldi	r24, 0xAA	; 170
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 a6 0a 	call	0x154c	; 0x154c <xcom_do_cartridgeAction>
				if(state < 0) {
    1406:	77 23       	and	r23, r23
    1408:	44 f6       	brge	.-112    	; 0x139a <main+0x8a>
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	99 e6       	ldi	r25, 0x69	; 105
    140e:	28 e1       	ldi	r18, 0x18	; 24
    1410:	81 50       	subi	r24, 0x01	; 1
    1412:	90 40       	sbci	r25, 0x00	; 0
    1414:	20 40       	sbci	r18, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <main+0x100>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <main+0x10a>
    141a:	00 00       	nop
					//Drain uart:
					_delay_ms(500);
					while(!(uart_getc() & UART_NO_DATA));
    141c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <uart_getc>
    1420:	90 ff       	sbrs	r25, 0
    1422:	fc cf       	rjmp	.-8      	; 0x141c <main+0x10c>
    1424:	ba cf       	rjmp	.-140    	; 0x139a <main+0x8a>
				}
			}
		} else {
			gpioWritePin(&D13, false);
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	88 ef       	ldi	r24, 0xF8	; 248
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	0e 94 25 10 	call	0x204a	; 0x204a <gpioWritePin>
    1430:	b4 cf       	rjmp	.-152    	; 0x139a <main+0x8a>

Disassembly of section .text.__vector_18:

00001cee <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	2f 93       	push	r18
    1cfa:	8f 93       	push	r24
    1cfc:	9f 93       	push	r25
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    1d02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
    1d06:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
    1d0a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1d0c:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <UART_RxHead>
    1d10:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
    1d12:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <UART_RxTail>
    1d16:	e9 17       	cp	r30, r25
    1d18:	39 f0       	breq	.+14     	; 0x1d28 <__vector_18+0x3a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1d1a:	e0 93 2a 04 	sts	0x042A, r30	; 0x80042a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	e0 59       	subi	r30, 0x90	; 144
    1d22:	fe 4f       	sbci	r31, 0xFE	; 254
    1d24:	20 83       	st	Z, r18
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <__vector_18+0x3c>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1d28:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    1d2a:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <UART_LastRxError>
    1d2e:	89 2b       	or	r24, r25
    1d30:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <UART_LastRxError>
}
    1d34:	ff 91       	pop	r31
    1d36:	ef 91       	pop	r30
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

Disassembly of section .text.__vector_19:

00001d48 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1d5a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <UART_TxHead>
    1d5e:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <UART_TxTail>
    1d62:	98 17       	cp	r25, r24
    1d64:	69 f0       	breq	.+26     	; 0x1d80 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1d66:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <UART_TxTail>
    1d6a:	ef 5f       	subi	r30, 0xFF	; 255
    1d6c:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1d6e:	e0 93 2b 04 	sts	0x042B, r30	; 0x80042b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	e0 59       	subi	r30, 0x90	; 144
    1d76:	fc 4f       	sbci	r31, 0xFC	; 252
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1d80:	e1 ec       	ldi	r30, 0xC1	; 193
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	80 83       	st	Z, r24
    }
}
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	0f 90       	pop	r0
    1d98:	1f 90       	pop	r1
    1d9a:	18 95       	reti

Disassembly of section .text.uart_init:

00001fa8 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1fa8:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <UART_TxHead>
    UART_TxTail = 0;
    1fac:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <UART_TxTail>
    UART_RxHead = 0;
    1fb0:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <UART_RxHead>
    UART_RxTail = 0;
    1fb4:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1fb8:	28 2f       	mov	r18, r24
    1fba:	39 2f       	mov	r19, r25
    1fbc:	33 23       	and	r19, r19
    1fbe:	1c f4       	brge	.+6      	; 0x1fc6 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1fc0:	22 e0       	ldi	r18, 0x02	; 2
    1fc2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1fc6:	90 78       	andi	r25, 0x80	; 128
    1fc8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    1fcc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    1fd0:	88 e9       	ldi	r24, 0x98	; 152
    1fd2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1fd6:	86 e0       	ldi	r24, 0x06	; 6
    1fd8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1fdc:	08 95       	ret

Disassembly of section .text.uart_getc:

00001f36 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    1f36:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <UART_RxHead>
    1f3a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <UART_RxTail>
    1f3e:	98 17       	cp	r25, r24
    1f40:	a1 f0       	breq	.+40     	; 0x1f6a <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1f42:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <UART_RxTail>
    1f46:	9f 5f       	subi	r25, 0xFF	; 255
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1f48:	e9 2f       	mov	r30, r25
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	e0 59       	subi	r30, 0x90	; 144
    1f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f50:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
    1f52:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <UART_LastRxError>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    1f56:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <UART_RxTail>
    
    UART_LastRxError = 0;
    1f5a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <UART_LastRxError>
    return (lastRxError << 8) + data;
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 2f       	mov	r25, r24
    1f62:	88 27       	eor	r24, r24
    1f64:	82 0f       	add	r24, r18
    1f66:	91 1d       	adc	r25, r1
    1f68:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    1f6e:	08 95       	ret

Disassembly of section .text.uart_putc:

00002136 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2136:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <UART_TxHead>
    213a:	2f 5f       	subi	r18, 0xFF	; 255
    213c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    213e:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <UART_TxTail>
    2142:	29 17       	cp	r18, r25
    2144:	e1 f3       	breq	.-8      	; 0x213e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    2146:	e2 2f       	mov	r30, r18
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	e0 59       	subi	r30, 0x90	; 144
    214c:	fc 4f       	sbci	r31, 0xFC	; 252
    214e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    2150:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    2154:	e1 ec       	ldi	r30, 0xC1	; 193
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 62       	ori	r24, 0x20	; 32
    215c:	80 83       	st	Z, r24
    215e:	08 95       	ret

Disassembly of section .text.uart_puts:

0000210a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	6b 01       	movw	r12, r22
    2112:	e8 2e       	mov	r14, r24
    while (*s) 
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <uart_puts+0x18>
      uart_putc(*s++);
    2116:	9f ef       	ldi	r25, 0xFF	; 255
    2118:	c9 1a       	sub	r12, r25
    211a:	d9 0a       	sbc	r13, r25
    211c:	e9 0a       	sbc	r14, r25
    211e:	0e 94 9b 10 	call	0x2136	; 0x2136 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    2122:	f6 01       	movw	r30, r12
    2124:	84 91       	lpm	r24, Z
    2126:	e7 fc       	sbrc	r14, 7
    2128:	80 81       	ld	r24, Z
    212a:	81 11       	cpse	r24, r1
    212c:	f4 cf       	rjmp	.-24     	; 0x2116 <uart_puts+0xc>
      uart_putc(*s++);

}/* uart_puts */
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	08 95       	ret

Disassembly of section .text.uart_putb:

00001b62 <uart_putb>:
Function: uart_putb()
Purpose:  transmit byte array to UART
Input:    data to be transmitted
Returns:  none
**************************************************************************/
void uart_putb(const uint8_t *s, uint32_t size) {
    1b62:	4f 92       	push	r4
    1b64:	5f 92       	push	r5
    1b66:	6f 92       	push	r6
    1b68:	8f 92       	push	r8
    1b6a:	9f 92       	push	r9
    1b6c:	af 92       	push	r10
    1b6e:	bf 92       	push	r11
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	2b 01       	movw	r4, r22
    1b7a:	68 2e       	mov	r6, r24
    1b7c:	49 01       	movw	r8, r18
    1b7e:	5a 01       	movw	r10, r20
	for(uint32_t n=0;n<size;n++) {
    1b80:	c1 2c       	mov	r12, r1
    1b82:	d1 2c       	mov	r13, r1
    1b84:	76 01       	movw	r14, r12
    1b86:	12 c0       	rjmp	.+36     	; 0x1bac <uart_putb+0x4a>
		uart_putc(s[n]);
    1b88:	a6 2d       	mov	r26, r6
    1b8a:	c2 01       	movw	r24, r4
    1b8c:	8c 0d       	add	r24, r12
    1b8e:	9d 1d       	adc	r25, r13
    1b90:	a1 1d       	adc	r26, r1
    1b92:	d7 fc       	sbrc	r13, 7
    1b94:	aa 95       	dec	r26
    1b96:	fc 01       	movw	r30, r24
    1b98:	84 91       	lpm	r24, Z
    1b9a:	a7 fd       	sbrc	r26, 7
    1b9c:	80 81       	ld	r24, Z
    1b9e:	0e 94 9b 10 	call	0x2136	; 0x2136 <uart_putc>
Purpose:  transmit byte array to UART
Input:    data to be transmitted
Returns:  none
**************************************************************************/
void uart_putb(const uint8_t *s, uint32_t size) {
	for(uint32_t n=0;n<size;n++) {
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	c8 1a       	sub	r12, r24
    1ba6:	d8 0a       	sbc	r13, r24
    1ba8:	e8 0a       	sbc	r14, r24
    1baa:	f8 0a       	sbc	r15, r24
    1bac:	c8 14       	cp	r12, r8
    1bae:	d9 04       	cpc	r13, r9
    1bb0:	ea 04       	cpc	r14, r10
    1bb2:	fb 04       	cpc	r15, r11
    1bb4:	48 f3       	brcs	.-46     	; 0x1b88 <uart_putb+0x26>
		uart_putc(s[n]);
	}
}/* uart_putb */
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	bf 90       	pop	r11
    1bc0:	af 90       	pop	r10
    1bc2:	9f 90       	pop	r9
    1bc4:	8f 90       	pop	r8
    1bc6:	6f 90       	pop	r6
    1bc8:	5f 90       	pop	r5
    1bca:	4f 90       	pop	r4
    1bcc:	08 95       	ret

Disassembly of section .text.xcom_readRomBank:

000017be <xcom_readRomBank>:
	}
	*/
	return XCOM_STATE_OK;
}

static int32_t xcom_readRomBank(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint8_t bank) {
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	1f 92       	push	r1
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	7c 01       	movw	r14, r24
	uint8_t data;
	uint16_t addr = 0;
	uint16_t offset = 0;
	
	if(bank > 0) {
    17d6:	44 23       	and	r20, r20
    17d8:	39 f0       	breq	.+14     	; 0x17e8 <xcom_readRomBank+0x2a>
		offset = 0x4000;
		gbCartridge_switchRomBank(slot, romInfo, bank);
    17da:	0e 94 b0 10 	call	0x2160	; 0x2160 <gbCartridge_switchRomBank>
	uint8_t data;
	uint16_t addr = 0;
	uint16_t offset = 0;
	
	if(bank > 0) {
		offset = 0x4000;
    17de:	c1 2c       	mov	r12, r1
    17e0:	68 94       	set
    17e2:	dd 24       	eor	r13, r13
    17e4:	d6 f8       	bld	r13, 6
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <xcom_readRomBank+0x2e>
}

static int32_t xcom_readRomBank(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint8_t bank) {
	uint8_t data;
	uint16_t addr = 0;
	uint16_t offset = 0;
    17e8:	c1 2c       	mov	r12, r1
    17ea:	d1 2c       	mov	r13, r1
	if(bank > 0) {
		offset = 0x4000;
		gbCartridge_switchRomBank(slot, romInfo, bank);
	}
	
	for(addr = 0; addr < 0x4000; addr++) {
    17ec:	00 e0       	ldi	r16, 0x00	; 0
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	24 c0       	rjmp	.+72     	; 0x183a <xcom_readRomBank+0x7c>
		if(gbCartridge_read(slot, addr + offset, &data) != GPIO_STATUS_OK) {
    17f2:	c7 01       	movw	r24, r14
    17f4:	a0 e8       	ldi	r26, 0x80	; 128
    17f6:	9e 01       	movw	r18, r28
    17f8:	2f 5f       	subi	r18, 0xFF	; 255
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	a8 01       	movw	r20, r16
    17fe:	4c 0d       	add	r20, r12
    1800:	5d 1d       	adc	r21, r13
    1802:	bc 01       	movw	r22, r24
    1804:	8a 2f       	mov	r24, r26
    1806:	0e 94 0d 03 	call	0x61a	; 0x61a <gbCartridge_read>
    180a:	88 23       	and	r24, r24
    180c:	61 f0       	breq	.+24     	; 0x1826 <xcom_readRomBank+0x68>
			xtransfer_transmitHeader(XCOM_TYPE_CARTRIDGE_OP_ERR, 0);
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	ba 01       	movw	r22, r20
    1814:	86 ef       	ldi	r24, 0xF6	; 246
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
			return XCOM_TYPE_CARTRIDGE_OP_ERR;
    181c:	66 ef       	ldi	r22, 0xF6	; 246
    181e:	7f ef       	ldi	r23, 0xFF	; 255
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	11 c0       	rjmp	.+34     	; 0x1848 <xcom_readRomBank+0x8a>
		}
		xtransfer_transmitData(&data, 1);
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <xtransfer_transmitData>
	if(bank > 0) {
		offset = 0x4000;
		gbCartridge_switchRomBank(slot, romInfo, bank);
	}
	
	for(addr = 0; addr < 0x4000; addr++) {
    1836:	0f 5f       	subi	r16, 0xFF	; 255
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	01 15       	cp	r16, r1
    183c:	80 e4       	ldi	r24, 0x40	; 64
    183e:	18 07       	cpc	r17, r24
    1840:	c0 f2       	brcs	.-80     	; 0x17f2 <xcom_readRomBank+0x34>
			xtransfer_transmitHeader(XCOM_TYPE_CARTRIDGE_OP_ERR, 0);
			return XCOM_TYPE_CARTRIDGE_OP_ERR;
		}
		xtransfer_transmitData(&data, 1);
	}
	return XCOM_STATE_OK;
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	cb 01       	movw	r24, r22
}
    1848:	0f 90       	pop	r0
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	08 95       	ret

Disassembly of section .text.xcom_cartridge_detect:

0000207e <xcom_cartridge_detect>:
#include "xcom.h"
#include "../gbCartridge/gbCartridge.h"

#define XCOM_TIMEOUT 10000

int32_t xcom_cartridge_detect(GB_RomInfo* romInfo) {
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
	int state;
	xtransfer_transmitHeader(XCOM_TYPE_GBROMINFO, sizeof(GB_RomInfo));
    2084:	4e e1       	ldi	r20, 0x1E	; 30
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	8a e0       	ldi	r24, 0x0A	; 10
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
	xtransfer_transmitData((uint8_t*)romInfo, sizeof(GB_RomInfo));
    2094:	4e e1       	ldi	r20, 0x1E	; 30
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	ce 01       	movw	r24, r28
    209e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <xtransfer_transmitData>
	if(state != XCOM_TYPE_GBROMINFO) {
		return state;
	}
	*/
	return XCOM_STATE_OK;
}
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	cb 01       	movw	r24, r22
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

Disassembly of section .text.xcom_do_cartridgeAction:

0000154c <xcom_do_cartridgeAction>:
		xtransfer_transmitData(&data, 1);
	}
	return XCOM_STATE_OK;
}

int32_t xcom_do_cartridgeAction(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint32_t timeout_ms) {
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	2c 97       	sbiw	r28, 0x0c	; 12
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	6c 01       	movw	r12, r24
    156c:	7b 01       	movw	r14, r22
    156e:	ba 01       	movw	r22, r20
    1570:	a9 01       	movw	r20, r18
	int32_t state;
	XTransfer_Header header;
	uint8_t bank;
	if((state = xtransfer_receiveHeader(&header, timeout_ms)) < 0) return state;
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 df 08 	call	0x11be	; 0x11be <xtransfer_receiveHeader>
    157a:	99 23       	and	r25, r25
    157c:	0c f4       	brge	.+2      	; 0x1580 <xcom_do_cartridgeAction+0x34>
    157e:	51 c0       	rjmp	.+162    	; 0x1622 <xcom_do_cartridgeAction+0xd6>
	switch(header.type) {
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	ad 81       	ldd	r26, Y+5	; 0x05
    1586:	be 81       	ldd	r27, Y+6	; 0x06
    1588:	8c 30       	cpi	r24, 0x0C	; 12
    158a:	91 05       	cpc	r25, r1
    158c:	a1 05       	cpc	r26, r1
    158e:	b1 05       	cpc	r27, r1
    1590:	21 f1       	breq	.+72     	; 0x15da <xcom_do_cartridgeAction+0x8e>
    1592:	8d 30       	cpi	r24, 0x0D	; 13
    1594:	91 05       	cpc	r25, r1
    1596:	a1 05       	cpc	r26, r1
    1598:	b1 05       	cpc	r27, r1
    159a:	59 f1       	breq	.+86     	; 0x15f2 <xcom_do_cartridgeAction+0xa6>
    159c:	0b 97       	sbiw	r24, 0x0b	; 11
    159e:	a1 05       	cpc	r26, r1
    15a0:	b1 05       	cpc	r27, r1
    15a2:	99 f5       	brne	.+102    	; 0x160a <xcom_do_cartridgeAction+0xbe>
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <xcom_do_cartridgeAction+0x72>
		case XCOM_TYPE_ROM_READ:
			for(bank=0;bank<romInfo->romBanks;bank++) {
				if((state = xcom_readRomBank(slot, romInfo, bank)) != XCOM_STATE_OK) {
    15a6:	41 2f       	mov	r20, r17
    15a8:	b7 01       	movw	r22, r14
    15aa:	c6 01       	movw	r24, r12
    15ac:	0e 94 df 0b 	call	0x17be	; 0x17be <xcom_readRomBank>
    15b0:	61 15       	cp	r22, r1
    15b2:	71 05       	cpc	r23, r1
    15b4:	81 05       	cpc	r24, r1
    15b6:	91 05       	cpc	r25, r1
    15b8:	c1 f5       	brne	.+112    	; 0x162a <xcom_do_cartridgeAction+0xde>
	XTransfer_Header header;
	uint8_t bank;
	if((state = xtransfer_receiveHeader(&header, timeout_ms)) < 0) return state;
	switch(header.type) {
		case XCOM_TYPE_ROM_READ:
			for(bank=0;bank<romInfo->romBanks;bank++) {
    15ba:	1f 5f       	subi	r17, 0xFF	; 255
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <xcom_do_cartridgeAction+0x74>
int32_t xcom_do_cartridgeAction(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint32_t timeout_ms) {
	int32_t state;
	XTransfer_Header header;
	uint8_t bank;
	if((state = xtransfer_receiveHeader(&header, timeout_ms)) < 0) return state;
	switch(header.type) {
    15be:	10 e0       	ldi	r17, 0x00	; 0
		case XCOM_TYPE_ROM_READ:
			for(bank=0;bank<romInfo->romBanks;bank++) {
    15c0:	81 2f       	mov	r24, r17
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	f7 01       	movw	r30, r14
    15c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    15c8:	33 8d       	ldd	r19, Z+27	; 0x1b
    15ca:	82 17       	cp	r24, r18
    15cc:	93 07       	cpc	r25, r19
    15ce:	58 f3       	brcs	.-42     	; 0x15a6 <xcom_do_cartridgeAction+0x5a>
				if((state = xcom_readRomBank(slot, romInfo, bank)) != XCOM_STATE_OK) {
					return state;
				}
			}
			return XCOM_STATE_OK;
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	2b c0       	rjmp	.+86     	; 0x1630 <xcom_do_cartridgeAction+0xe4>
		break;
		case XCOM_TYPE_SAVE_READ:
			xtransfer_transmitHeader(XTRANSFER_STATE_ERR_INVALID_ARG, 0);
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	ba 01       	movw	r22, r20
    15e0:	8c ef       	ldi	r24, 0xFC	; 252
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
			return XTRANSFER_STATE_ERR_INVALID_ARG;
    15e8:	4c ef       	ldi	r20, 0xFC	; 252
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	2f ef       	ldi	r18, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	1f c0       	rjmp	.+62     	; 0x1630 <xcom_do_cartridgeAction+0xe4>
		break;
		case XCOM_TYPE_SAVE_WRITE:
			xtransfer_transmitHeader(XTRANSFER_STATE_ERR_INVALID_ARG, 0);
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	ba 01       	movw	r22, r20
    15f8:	8c ef       	ldi	r24, 0xFC	; 252
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
			return XTRANSFER_STATE_ERR_INVALID_ARG;
    1600:	4c ef       	ldi	r20, 0xFC	; 252
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <xcom_do_cartridgeAction+0xe4>
		break;
		default:
			xtransfer_transmitHeader(XTRANSFER_STATE_ERR_INVALID_ARG, 0);
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	ba 01       	movw	r22, r20
    1610:	8c ef       	ldi	r24, 0xFC	; 252
    1612:	9f ef       	ldi	r25, 0xFF	; 255
    1614:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
			return XTRANSFER_STATE_ERR_INVALID_ARG;
    1618:	4c ef       	ldi	r20, 0xFC	; 252
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	2f ef       	ldi	r18, 0xFF	; 255
    161e:	9f ef       	ldi	r25, 0xFF	; 255
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <xcom_do_cartridgeAction+0xe4>

int32_t xcom_do_cartridgeAction(GB_CartridgeSlot* slot, GB_RomInfo* romInfo, uint32_t timeout_ms) {
	int32_t state;
	XTransfer_Header header;
	uint8_t bank;
	if((state = xtransfer_receiveHeader(&header, timeout_ms)) < 0) return state;
    1622:	46 2f       	mov	r20, r22
    1624:	37 2f       	mov	r19, r23
    1626:	28 2f       	mov	r18, r24
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <xcom_do_cartridgeAction+0xe4>
	switch(header.type) {
		case XCOM_TYPE_ROM_READ:
			for(bank=0;bank<romInfo->romBanks;bank++) {
				if((state = xcom_readRomBank(slot, romInfo, bank)) != XCOM_STATE_OK) {
					return state;
    162a:	46 2f       	mov	r20, r22
    162c:	37 2f       	mov	r19, r23
    162e:	28 2f       	mov	r18, r24
		break;
		default:
			xtransfer_transmitHeader(XTRANSFER_STATE_ERR_INVALID_ARG, 0);
			return XTRANSFER_STATE_ERR_INVALID_ARG;
	}
}
    1630:	64 2f       	mov	r22, r20
    1632:	73 2f       	mov	r23, r19
    1634:	82 2f       	mov	r24, r18
    1636:	2c 96       	adiw	r28, 0x0c	; 12
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	08 95       	ret

Disassembly of section .text.xtransfer_transmitHeader:

00001c34 <xtransfer_transmitHeader>:
#include <stdbool.h>
#include <util/delay.h>
#include "xtransfer.h"
#include "../uart/uart.h"

void xtransfer_transmitHeader(int type, uint32_t size) {
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
	XTransfer_Header header;
	header.ioId[0] = 'X';
    1c48:	28 e5       	ldi	r18, 0x58	; 88
    1c4a:	29 83       	std	Y+1, r18	; 0x01
	header.ioId[1] = header.xId[1] = 'T';
    1c4c:	24 e5       	ldi	r18, 0x54	; 84
    1c4e:	2c 87       	std	Y+12, r18	; 0x0c
    1c50:	2a 83       	std	Y+2, r18	; 0x02
	header.xId[0] = 'E';
    1c52:	25 e4       	ldi	r18, 0x45	; 69
    1c54:	2b 87       	std	Y+11, r18	; 0x0b
	header.type = type;
    1c56:	09 2e       	mov	r0, r25
    1c58:	00 0c       	add	r0, r0
    1c5a:	aa 0b       	sbc	r26, r26
    1c5c:	bb 0b       	sbc	r27, r27
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	ad 83       	std	Y+5, r26	; 0x05
    1c64:	be 83       	std	Y+6, r27	; 0x06
	header.size = size;
    1c66:	4f 83       	std	Y+7, r20	; 0x07
    1c68:	58 87       	std	Y+8, r21	; 0x08
    1c6a:	69 87       	std	Y+9, r22	; 0x09
    1c6c:	7a 87       	std	Y+10, r23	; 0x0a
	uart_putb((uint8_t*)&header, sizeof(header));;
    1c6e:	be 01       	movw	r22, r28
    1c70:	6f 5f       	subi	r22, 0xFF	; 255
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	80 e8       	ldi	r24, 0x80	; 128
    1c76:	2c e0       	ldi	r18, 0x0C	; 12
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <uart_putb>
}
    1c82:	2c 96       	adiw	r28, 0x0c	; 12
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

Disassembly of section .text.xtransfer_transmitData:

000021b0 <xtransfer_transmitData>:

void xtransfer_transmitData(uint8_t *data, uint32_t size) {
    21b0:	9a 01       	movw	r18, r20
    21b2:	ab 01       	movw	r20, r22
	uart_putb(data, size);
    21b4:	bc 01       	movw	r22, r24
    21b6:	80 e8       	ldi	r24, 0x80	; 128
    21b8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <uart_putb>
    21bc:	08 95       	ret

Disassembly of section .text.xtransfer_receiveHeader:

000011be <xtransfer_receiveHeader>:
}

int32_t xtransfer_receiveHeader(XTransfer_Header *header, uint32_t timeoutMs) {
    11be:	4f 92       	push	r4
    11c0:	5f 92       	push	r5
    11c2:	6f 92       	push	r6
    11c4:	7f 92       	push	r7
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
	uint32_t timeMs = 0;
	uint16_t recvd = 0;
	uint8_t recvdata = 0;
	uint32_t size = 0;
	if(header == NULL) {
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <xtransfer_receiveHeader+0x22>
    11de:	81 c0       	rjmp	.+258    	; 0x12e2 <xtransfer_receiveHeader+0x124>
    11e0:	2a 01       	movw	r4, r20
    11e2:	3b 01       	movw	r6, r22
    11e4:	ec 01       	movw	r28, r24
		return XTRANSFER_STATE_ERR_INVALID_ARG;
	}
	header->ioId[0] = header->xId[0] = header->ioId[1] = header->xId[1] = 0;
    11e6:	1b 86       	std	Y+11, r1	; 0x0b
    11e8:	19 82       	std	Y+1, r1	; 0x01
    11ea:	1a 86       	std	Y+10, r1	; 0x0a
    11ec:	18 82       	st	Y, r1

int32_t xtransfer_receiveHeader(XTransfer_Header *header, uint32_t timeoutMs) {
	uint32_t timeMs = 0;
	uint16_t recvd = 0;
	uint8_t recvdata = 0;
	uint32_t size = 0;
    11ee:	81 2c       	mov	r8, r1
    11f0:	91 2c       	mov	r9, r1
    11f2:	54 01       	movw	r10, r8
void xtransfer_transmitData(uint8_t *data, uint32_t size) {
	uart_putb(data, size);
}

int32_t xtransfer_receiveHeader(XTransfer_Header *header, uint32_t timeoutMs) {
	uint32_t timeMs = 0;
    11f4:	c1 2c       	mov	r12, r1
    11f6:	d1 2c       	mov	r13, r1
    11f8:	76 01       	movw	r14, r12
	uint32_t size = 0;
	if(header == NULL) {
		return XTRANSFER_STATE_ERR_INVALID_ARG;
	}
	header->ioId[0] = header->xId[0] = header->ioId[1] = header->xId[1] = 0;
	while(timeMs < timeoutMs) {
    11fa:	5d c0       	rjmp	.+186    	; 0x12b6 <xtransfer_receiveHeader+0xf8>
		recvd = uart_getc();
    11fc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <uart_getc>
		if(recvd & UART_NO_DATA) {
    1200:	90 ff       	sbrs	r25, 0
    1202:	0c c0       	rjmp	.+24     	; 0x121c <xtransfer_receiveHeader+0x5e>
			//Error Reciving Data
			timeMs++;
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	c2 1a       	sub	r12, r18
    1208:	d2 0a       	sbc	r13, r18
    120a:	e2 0a       	sbc	r14, r18
    120c:	f2 0a       	sbc	r15, r18
    120e:	8f e9       	ldi	r24, 0x9F	; 159
    1210:	9f e0       	ldi	r25, 0x0F	; 15
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <xtransfer_receiveHeader+0x54>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <xtransfer_receiveHeader+0x5a>
    1218:	00 00       	nop
    121a:	4d c0       	rjmp	.+154    	; 0x12b6 <xtransfer_receiveHeader+0xf8>
			_delay_ms(1);
		} else {
			timeMs = 0;
			recvdata = recvd & 0xff;
			if(size < sizeof(XTransfer_Header)) {
    121c:	2c e0       	ldi	r18, 0x0C	; 12
    121e:	82 16       	cp	r8, r18
    1220:	91 04       	cpc	r9, r1
    1222:	a1 04       	cpc	r10, r1
    1224:	b1 04       	cpc	r11, r1
    1226:	d8 f4       	brcc	.+54     	; 0x125e <xtransfer_receiveHeader+0xa0>
				((uint8_t*)header)[size] = recvdata;
    1228:	fe 01       	movw	r30, r28
    122a:	e8 0d       	add	r30, r8
    122c:	f9 1d       	adc	r31, r9
    122e:	80 83       	st	Z, r24
				if(header->ioId[0] == 'X') {
    1230:	88 81       	ld	r24, Y
    1232:	88 35       	cpi	r24, 0x58	; 88
    1234:	49 f4       	brne	.+18     	; 0x1248 <xtransfer_receiveHeader+0x8a>
					size++;
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	88 1a       	sub	r8, r24
    123a:	98 0a       	sbc	r9, r24
    123c:	a8 0a       	sbc	r10, r24
    123e:	b8 0a       	sbc	r11, r24
		if(recvd & UART_NO_DATA) {
			//Error Reciving Data
			timeMs++;
			_delay_ms(1);
		} else {
			timeMs = 0;
    1240:	c1 2c       	mov	r12, r1
    1242:	d1 2c       	mov	r13, r1
    1244:	76 01       	movw	r14, r12
    1246:	37 c0       	rjmp	.+110    	; 0x12b6 <xtransfer_receiveHeader+0xf8>
    1248:	8f e9       	ldi	r24, 0x9F	; 159
    124a:	9f e0       	ldi	r25, 0x0F	; 15
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <xtransfer_receiveHeader+0x8e>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <xtransfer_receiveHeader+0x94>
    1252:	00 00       	nop
			if(size < sizeof(XTransfer_Header)) {
				((uint8_t*)header)[size] = recvdata;
				if(header->ioId[0] == 'X') {
					size++;
				} else {
					timeMs++;
    1254:	c1 2c       	mov	r12, r1
    1256:	d1 2c       	mov	r13, r1
    1258:	76 01       	movw	r14, r12
    125a:	c3 94       	inc	r12
    125c:	2c c0       	rjmp	.+88     	; 0x12b6 <xtransfer_receiveHeader+0xf8>
					_delay_ms(1);
				}
			} else {
				if(header->ioId[0] == 'X' &&  header->ioId[1] == 'T' &&
    125e:	88 81       	ld	r24, Y
    1260:	88 35       	cpi	r24, 0x58	; 88
    1262:	b1 f4       	brne	.+44     	; 0x1290 <xtransfer_receiveHeader+0xd2>
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	84 35       	cpi	r24, 0x54	; 84
    1268:	99 f4       	brne	.+38     	; 0x1290 <xtransfer_receiveHeader+0xd2>
				   header->xId[0] == 'E' &&  header->xId[1] == 'T') {
    126a:	8a 85       	ldd	r24, Y+10	; 0x0a
				} else {
					timeMs++;
					_delay_ms(1);
				}
			} else {
				if(header->ioId[0] == 'X' &&  header->ioId[1] == 'T' &&
    126c:	85 34       	cpi	r24, 0x45	; 69
    126e:	81 f4       	brne	.+32     	; 0x1290 <xtransfer_receiveHeader+0xd2>
				   header->xId[0] == 'E' &&  header->xId[1] == 'T') {
    1270:	8b 85       	ldd	r24, Y+11	; 0x0b
    1272:	84 35       	cpi	r24, 0x54	; 84
    1274:	69 f4       	brne	.+26     	; 0x1290 <xtransfer_receiveHeader+0xd2>
					//Header is valid
					if(header->size == 0) {
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	a8 85       	ldd	r26, Y+8	; 0x08
    127c:	b9 85       	ldd	r27, Y+9	; 0x09
    127e:	89 2b       	or	r24, r25
    1280:	8a 2b       	or	r24, r26
    1282:	8b 2b       	or	r24, r27
    1284:	99 f5       	brne	.+102    	; 0x12ec <xtransfer_receiveHeader+0x12e>
						return header->type;
    1286:	6a 81       	ldd	r22, Y+2	; 0x02
    1288:	7b 81       	ldd	r23, Y+3	; 0x03
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	31 c0       	rjmp	.+98     	; 0x12f2 <xtransfer_receiveHeader+0x134>
					} else {
						return XTRANSFER_STATE_OK;;
					}
				} else {
					xtransfer_transmitHeader(XTRANSFER_STATE_ERR_RECV_HEADER, sizeof(XTransfer_Header));
    1290:	4c e0       	ldi	r20, 0x0C	; 12
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	9f ef       	ldi	r25, 0xFF	; 255
    129c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
					xtransfer_transmitData((uint8_t*)header, sizeof(XTransfer_Header));
    12a0:	4c e0       	ldi	r20, 0x0C	; 12
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <xtransfer_transmitData>
					return XTRANSFER_STATE_ERR_RECV_HEADER;
    12ae:	6f ef       	ldi	r22, 0xFF	; 255
    12b0:	7f ef       	ldi	r23, 0xFF	; 255
    12b2:	cb 01       	movw	r24, r22
    12b4:	1e c0       	rjmp	.+60     	; 0x12f2 <xtransfer_receiveHeader+0x134>
	uint32_t size = 0;
	if(header == NULL) {
		return XTRANSFER_STATE_ERR_INVALID_ARG;
	}
	header->ioId[0] = header->xId[0] = header->ioId[1] = header->xId[1] = 0;
	while(timeMs < timeoutMs) {
    12b6:	c4 14       	cp	r12, r4
    12b8:	d5 04       	cpc	r13, r5
    12ba:	e6 04       	cpc	r14, r6
    12bc:	f7 04       	cpc	r15, r7
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <xtransfer_receiveHeader+0x104>
    12c0:	9d cf       	rjmp	.-198    	; 0x11fc <xtransfer_receiveHeader+0x3e>
					return XTRANSFER_STATE_ERR_RECV_HEADER;
				}
			}
		}
	}
	xtransfer_transmitHeader(XTRANSFER_STATE_ERR_TIMOUT, 1);
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	8d ef       	ldi	r24, 0xFD	; 253
    12cc:	9f ef       	ldi	r25, 0xFF	; 255
    12ce:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xtransfer_transmitHeader>
	uart_putc(0x1);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 9b 10 	call	0x2136	; 0x2136 <uart_putc>
	return XTRANSFER_STATE_ERR_TIMOUT;
    12d8:	6d ef       	ldi	r22, 0xFD	; 253
    12da:	7f ef       	ldi	r23, 0xFF	; 255
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <xtransfer_receiveHeader+0x134>
	uint32_t timeMs = 0;
	uint16_t recvd = 0;
	uint8_t recvdata = 0;
	uint32_t size = 0;
	if(header == NULL) {
		return XTRANSFER_STATE_ERR_INVALID_ARG;
    12e2:	6c ef       	ldi	r22, 0xFC	; 252
    12e4:	7f ef       	ldi	r23, 0xFF	; 255
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	9f ef       	ldi	r25, 0xFF	; 255
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <xtransfer_receiveHeader+0x134>
				   header->xId[0] == 'E' &&  header->xId[1] == 'T') {
					//Header is valid
					if(header->size == 0) {
						return header->type;
					} else {
						return XTRANSFER_STATE_OK;;
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	cb 01       	movw	r24, r22
		}
	}
	xtransfer_transmitHeader(XTRANSFER_STATE_ERR_TIMOUT, 1);
	uart_putc(0x1);
	return XTRANSFER_STATE_ERR_TIMOUT;
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	5f 90       	pop	r5
    130c:	4f 90       	pop	r4
    130e:	08 95       	ret

Disassembly of section .text.libgcc:

000021be <__tablejump2__>:
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	05 90       	lpm	r0, Z+
    21c4:	f4 91       	lpm	r31, Z
    21c6:	e0 2d       	mov	r30, r0
    21c8:	09 94       	ijmp

Disassembly of section .text.libgcc:

000021a0 <__xload_2>:
    21a0:	57 fd       	sbrc	r21, 7
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <__xload_2+0xa>
    21a4:	65 91       	lpm	r22, Z+
    21a6:	75 91       	lpm	r23, Z+
    21a8:	08 95       	ret
    21aa:	61 91       	ld	r22, Z+
    21ac:	71 91       	ld	r23, Z+
    21ae:	08 95       	ret

Disassembly of section .text.avrlibc:

00001d9c <memcmp>:
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	6b 01       	movw	r12, r22
    1da8:	e8 2e       	mov	r14, r24
    1daa:	01 15       	cp	r16, r1
    1dac:	11 05       	cpc	r17, r1
    1dae:	a1 f0       	breq	.+40     	; 0x1dd8 <memcmp+0x3c>
    1db0:	f6 01       	movw	r30, r12
    1db2:	84 91       	lpm	r24, Z
    1db4:	e7 fc       	sbrc	r14, 7
    1db6:	80 81       	ld	r24, Z
    1db8:	f9 01       	movw	r30, r18
    1dba:	54 91       	lpm	r21, Z
    1dbc:	47 fd       	sbrc	r20, 7
    1dbe:	50 81       	ld	r21, Z
    1dc0:	85 13       	cpse	r24, r21
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <memcmp+0x42>
    1dc4:	01 50       	subi	r16, 0x01	; 1
    1dc6:	11 09       	sbc	r17, r1
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	c8 1a       	sub	r12, r24
    1dcc:	d8 0a       	sbc	r13, r24
    1dce:	e8 0a       	sbc	r14, r24
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd6:	e9 cf       	rjmp	.-46     	; 0x1daa <memcmp+0xe>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <memcmp+0x48>
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	85 1b       	sub	r24, r21
    1de2:	91 09       	sbc	r25, r1
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	08 95       	ret

Disassembly of section .text.avrlibc:

00001e36 <sprintf>:
    1e36:	af e0       	ldi	r26, 0x0F	; 15
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e1 e2       	ldi	r30, 0x21	; 33
    1e3c:	ff e0       	ldi	r31, 0x0F	; 15
    1e3e:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x1c>
    1e42:	0e 89       	ldd	r16, Y+22	; 0x16
    1e44:	1f 89       	ldd	r17, Y+23	; 0x17
    1e46:	86 e0       	ldi	r24, 0x06	; 6
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	1a 83       	std	Y+2, r17	; 0x02
    1e4c:	09 83       	std	Y+1, r16	; 0x01
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	9f e7       	ldi	r25, 0x7F	; 127
    1e52:	9f 83       	std	Y+7, r25	; 0x07
    1e54:	8e 83       	std	Y+6, r24	; 0x06
    1e56:	9e 01       	movw	r18, r28
    1e58:	25 5e       	subi	r18, 0xE5	; 229
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	48 8d       	ldd	r20, Y+24	; 0x18
    1e5e:	59 8d       	ldd	r21, Y+25	; 0x19
    1e60:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vfprintf>
    1e6a:	e8 85       	ldd	r30, Y+8	; 0x08
    1e6c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e6e:	e0 0f       	add	r30, r16
    1e70:	f1 1f       	adc	r31, r17
    1e72:	10 82       	st	Z, r1
    1e74:	2f 96       	adiw	r28, 0x0f	; 15
    1e76:	e4 e0       	ldi	r30, 0x04	; 4
    1e78:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000001d2 <vfprintf>:
 1d2:	2f 92       	push	r2
 1d4:	3f 92       	push	r3
 1d6:	4f 92       	push	r4
 1d8:	6f 92       	push	r6
 1da:	7f 92       	push	r7
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	62 97       	sbiw	r28, 0x12	; 18
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	6c 01       	movw	r12, r24
 206:	3a 01       	movw	r6, r20
 208:	86 2e       	mov	r8, r22
 20a:	79 01       	movw	r14, r18
 20c:	fc 01       	movw	r30, r24
 20e:	10 86       	std	Z+8, r1	; 0x08
 210:	17 82       	std	Z+7, r1	; 0x07
 212:	84 81       	ldd	r24, Z+4	; 0x04
 214:	81 ff       	sbrs	r24, 1
 216:	e7 c1       	rjmp	.+974    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 218:	9e 01       	movw	r18, r28
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	3d 87       	std	Y+13, r19	; 0x0d
 220:	2c 87       	std	Y+12, r18	; 0x0c
 222:	c9 01       	movw	r24, r18
 224:	a0 e8       	ldi	r26, 0x80	; 128
 226:	88 8b       	std	Y+16, r24	; 0x10
 228:	99 8b       	std	Y+17, r25	; 0x11
 22a:	aa 8b       	std	Y+18, r26	; 0x12
 22c:	9f e3       	ldi	r25, 0x3F	; 63
 22e:	99 2e       	mov	r9, r25
 230:	f3 01       	movw	r30, r6
 232:	84 91       	lpm	r24, Z
 234:	87 fc       	sbrc	r8, 7
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	09 f4       	brne	.+2      	; 0x23e <vfprintf+0x6c>
 23c:	d0 c1       	rjmp	.+928    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 23e:	48 2d       	mov	r20, r8
 240:	93 01       	movw	r18, r6
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	4f 4f       	sbci	r20, 0xFF	; 255
 248:	85 32       	cpi	r24, 0x25	; 37
 24a:	19 f0       	breq	.+6      	; 0x252 <vfprintf+0x80>
 24c:	39 01       	movw	r6, r18
 24e:	84 2e       	mov	r8, r20
 250:	0a c0       	rjmp	.+20     	; 0x266 <vfprintf+0x94>
 252:	f9 01       	movw	r30, r18
 254:	84 91       	lpm	r24, Z
 256:	47 fd       	sbrc	r20, 7
 258:	80 81       	ld	r24, Z
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	69 0e       	add	r6, r25
 25e:	71 1c       	adc	r7, r1
 260:	81 1c       	adc	r8, r1
 262:	85 32       	cpi	r24, 0x25	; 37
 264:	29 f4       	brne	.+10     	; 0x270 <vfprintf+0x9e>
 266:	b6 01       	movw	r22, r12
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 26e:	e0 cf       	rjmp	.-64     	; 0x230 <vfprintf+0x5e>
 270:	b1 2c       	mov	r11, r1
 272:	00 e0       	ldi	r16, 0x00	; 0
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	10 32       	cpi	r17, 0x20	; 32
 278:	a0 f4       	brcc	.+40     	; 0x2a2 <vfprintf+0xd0>
 27a:	8b 32       	cpi	r24, 0x2B	; 43
 27c:	69 f0       	breq	.+26     	; 0x298 <vfprintf+0xc6>
 27e:	30 f4       	brcc	.+12     	; 0x28c <vfprintf+0xba>
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	59 f0       	breq	.+22     	; 0x29a <vfprintf+0xc8>
 284:	83 32       	cpi	r24, 0x23	; 35
 286:	69 f4       	brne	.+26     	; 0x2a2 <vfprintf+0xd0>
 288:	10 61       	ori	r17, 0x10	; 16
 28a:	2c c0       	rjmp	.+88     	; 0x2e4 <vfprintf+0x112>
 28c:	8d 32       	cpi	r24, 0x2D	; 45
 28e:	39 f0       	breq	.+14     	; 0x29e <vfprintf+0xcc>
 290:	80 33       	cpi	r24, 0x30	; 48
 292:	39 f4       	brne	.+14     	; 0x2a2 <vfprintf+0xd0>
 294:	11 60       	ori	r17, 0x01	; 1
 296:	26 c0       	rjmp	.+76     	; 0x2e4 <vfprintf+0x112>
 298:	12 60       	ori	r17, 0x02	; 2
 29a:	14 60       	ori	r17, 0x04	; 4
 29c:	23 c0       	rjmp	.+70     	; 0x2e4 <vfprintf+0x112>
 29e:	18 60       	ori	r17, 0x08	; 8
 2a0:	21 c0       	rjmp	.+66     	; 0x2e4 <vfprintf+0x112>
 2a2:	17 fd       	sbrc	r17, 7
 2a4:	29 c0       	rjmp	.+82     	; 0x2f8 <vfprintf+0x126>
 2a6:	90 ed       	ldi	r25, 0xD0	; 208
 2a8:	98 0f       	add	r25, r24
 2aa:	9a 30       	cpi	r25, 0x0A	; 10
 2ac:	78 f4       	brcc	.+30     	; 0x2cc <vfprintf+0xfa>
 2ae:	16 ff       	sbrs	r17, 6
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <vfprintf+0xec>
 2b2:	aa e0       	ldi	r26, 0x0A	; 10
 2b4:	ba 9e       	mul	r11, r26
 2b6:	90 0d       	add	r25, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	b9 2e       	mov	r11, r25
 2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <vfprintf+0x112>
 2be:	ea e0       	ldi	r30, 0x0A	; 10
 2c0:	0e 9f       	mul	r16, r30
 2c2:	90 0d       	add	r25, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	09 2f       	mov	r16, r25
 2c8:	10 62       	ori	r17, 0x20	; 32
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <vfprintf+0x112>
 2cc:	8e 32       	cpi	r24, 0x2E	; 46
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <vfprintf+0x106>
 2d0:	16 fd       	sbrc	r17, 6
 2d2:	85 c1       	rjmp	.+778    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 2d4:	10 64       	ori	r17, 0x40	; 64
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <vfprintf+0x112>
 2d8:	8c 36       	cpi	r24, 0x6C	; 108
 2da:	11 f4       	brne	.+4      	; 0x2e0 <vfprintf+0x10e>
 2dc:	10 68       	ori	r17, 0x80	; 128
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <vfprintf+0x112>
 2e0:	88 36       	cpi	r24, 0x68	; 104
 2e2:	51 f4       	brne	.+20     	; 0x2f8 <vfprintf+0x126>
 2e4:	f3 01       	movw	r30, r6
 2e6:	84 91       	lpm	r24, Z
 2e8:	87 fc       	sbrc	r8, 7
 2ea:	80 81       	ld	r24, Z
 2ec:	ff ef       	ldi	r31, 0xFF	; 255
 2ee:	6f 1a       	sub	r6, r31
 2f0:	7f 0a       	sbc	r7, r31
 2f2:	8f 0a       	sbc	r8, r31
 2f4:	81 11       	cpse	r24, r1
 2f6:	bf cf       	rjmp	.-130    	; 0x276 <vfprintf+0xa4>
 2f8:	98 2f       	mov	r25, r24
 2fa:	9f 7d       	andi	r25, 0xDF	; 223
 2fc:	95 54       	subi	r25, 0x45	; 69
 2fe:	93 30       	cpi	r25, 0x03	; 3
 300:	28 f4       	brcc	.+10     	; 0x30c <vfprintf+0x13a>
 302:	24 e0       	ldi	r18, 0x04	; 4
 304:	e2 0e       	add	r14, r18
 306:	f1 1c       	adc	r15, r1
 308:	99 82       	std	Y+1, r9	; 0x01
 30a:	0f c0       	rjmp	.+30     	; 0x32a <vfprintf+0x158>
 30c:	83 36       	cpi	r24, 0x63	; 99
 30e:	31 f0       	breq	.+12     	; 0x31c <vfprintf+0x14a>
 310:	83 37       	cpi	r24, 0x73	; 115
 312:	91 f0       	breq	.+36     	; 0x338 <vfprintf+0x166>
 314:	83 35       	cpi	r24, 0x53	; 83
 316:	09 f0       	breq	.+2      	; 0x31a <vfprintf+0x148>
 318:	63 c0       	rjmp	.+198    	; 0x3e0 <vfprintf+0x20e>
 31a:	27 c0       	rjmp	.+78     	; 0x36a <vfprintf+0x198>
 31c:	f7 01       	movw	r30, r14
 31e:	80 81       	ld	r24, Z
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	97 01       	movw	r18, r14
 324:	2e 5f       	subi	r18, 0xFE	; 254
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	79 01       	movw	r14, r18
 32a:	28 88       	ldd	r2, Y+16	; 0x10
 32c:	39 88       	ldd	r3, Y+17	; 0x11
 32e:	4a 88       	ldd	r4, Y+18	; 0x12
 330:	aa 24       	eor	r10, r10
 332:	a3 94       	inc	r10
 334:	b1 2c       	mov	r11, r1
 336:	17 c0       	rjmp	.+46     	; 0x366 <vfprintf+0x194>
 338:	a7 01       	movw	r20, r14
 33a:	4d 5f       	subi	r20, 0xFD	; 253
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	5f 87       	std	Y+15, r21	; 0x0f
 340:	4e 87       	std	Y+14, r20	; 0x0e
 342:	f7 01       	movw	r30, r14
 344:	20 80       	ld	r2, Z
 346:	31 80       	ldd	r3, Z+1	; 0x01
 348:	42 80       	ldd	r4, Z+2	; 0x02
 34a:	16 ff       	sbrs	r17, 6
 34c:	03 c0       	rjmp	.+6      	; 0x354 <vfprintf+0x182>
 34e:	4b 2d       	mov	r20, r11
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <vfprintf+0x186>
 354:	4f ef       	ldi	r20, 0xFF	; 255
 356:	5f ef       	ldi	r21, 0xFF	; 255
 358:	84 2d       	mov	r24, r4
 35a:	b1 01       	movw	r22, r2
 35c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <strnlen>
 360:	5c 01       	movw	r10, r24
 362:	ee 84       	ldd	r14, Y+14	; 0x0e
 364:	ff 84       	ldd	r15, Y+15	; 0x0f
 366:	1f 77       	andi	r17, 0x7F	; 127
 368:	18 c0       	rjmp	.+48     	; 0x39a <vfprintf+0x1c8>
 36a:	97 01       	movw	r18, r14
 36c:	2d 5f       	subi	r18, 0xFD	; 253
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	3f 87       	std	Y+15, r19	; 0x0f
 372:	2e 87       	std	Y+14, r18	; 0x0e
 374:	f7 01       	movw	r30, r14
 376:	20 80       	ld	r2, Z
 378:	31 80       	ldd	r3, Z+1	; 0x01
 37a:	42 80       	ldd	r4, Z+2	; 0x02
 37c:	16 ff       	sbrs	r17, 6
 37e:	03 c0       	rjmp	.+6      	; 0x386 <vfprintf+0x1b4>
 380:	4b 2d       	mov	r20, r11
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <vfprintf+0x1b8>
 386:	4f ef       	ldi	r20, 0xFF	; 255
 388:	5f ef       	ldi	r21, 0xFF	; 255
 38a:	84 2d       	mov	r24, r4
 38c:	b1 01       	movw	r22, r2
 38e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <strnlen>
 392:	5c 01       	movw	r10, r24
 394:	10 68       	ori	r17, 0x80	; 128
 396:	ee 84       	ldd	r14, Y+14	; 0x0e
 398:	ff 84       	ldd	r15, Y+15	; 0x0f
 39a:	13 fd       	sbrc	r17, 3
 39c:	1d c0       	rjmp	.+58     	; 0x3d8 <vfprintf+0x206>
 39e:	80 2f       	mov	r24, r16
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a8 16       	cp	r10, r24
 3a4:	b9 06       	cpc	r11, r25
 3a6:	c0 f4       	brcc	.+48     	; 0x3d8 <vfprintf+0x206>
 3a8:	b6 01       	movw	r22, r12
 3aa:	80 e2       	ldi	r24, 0x20	; 32
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 3b2:	01 50       	subi	r16, 0x01	; 1
 3b4:	f4 cf       	rjmp	.-24     	; 0x39e <vfprintf+0x1cc>
 3b6:	f1 01       	movw	r30, r2
 3b8:	84 91       	lpm	r24, Z
 3ba:	47 fc       	sbrc	r4, 7
 3bc:	80 81       	ld	r24, Z
 3be:	ff ef       	ldi	r31, 0xFF	; 255
 3c0:	2f 1a       	sub	r2, r31
 3c2:	3f 0a       	sbc	r3, r31
 3c4:	4f 0a       	sbc	r4, r31
 3c6:	b6 01       	movw	r22, r12
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 3ce:	01 11       	cpse	r16, r1
 3d0:	01 50       	subi	r16, 0x01	; 1
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	a2 1a       	sub	r10, r18
 3d6:	b1 08       	sbc	r11, r1
 3d8:	a1 14       	cp	r10, r1
 3da:	b1 04       	cpc	r11, r1
 3dc:	61 f7       	brne	.-40     	; 0x3b6 <vfprintf+0x1e4>
 3de:	f5 c0       	rjmp	.+490    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 3e0:	84 36       	cpi	r24, 0x64	; 100
 3e2:	11 f0       	breq	.+4      	; 0x3e8 <vfprintf+0x216>
 3e4:	89 36       	cpi	r24, 0x69	; 105
 3e6:	71 f5       	brne	.+92     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3e8:	f7 01       	movw	r30, r14
 3ea:	17 ff       	sbrs	r17, 7
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <vfprintf+0x22c>
 3ee:	60 81       	ld	r22, Z
 3f0:	71 81       	ldd	r23, Z+1	; 0x01
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	93 81       	ldd	r25, Z+3	; 0x03
 3f6:	97 01       	movw	r18, r14
 3f8:	2c 5f       	subi	r18, 0xFC	; 252
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fe:	60 81       	ld	r22, Z
 400:	71 81       	ldd	r23, Z+1	; 0x01
 402:	07 2e       	mov	r0, r23
 404:	00 0c       	add	r0, r0
 406:	88 0b       	sbc	r24, r24
 408:	99 0b       	sbc	r25, r25
 40a:	97 01       	movw	r18, r14
 40c:	2e 5f       	subi	r18, 0xFE	; 254
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	79 01       	movw	r14, r18
 412:	1f 76       	andi	r17, 0x6F	; 111
 414:	31 2e       	mov	r3, r17
 416:	97 ff       	sbrs	r25, 7
 418:	0a c0       	rjmp	.+20     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 41a:	90 95       	com	r25
 41c:	80 95       	com	r24
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	31 2f       	mov	r19, r17
 42a:	30 68       	ori	r19, 0x80	; 128
 42c:	33 2e       	mov	r3, r19
 42e:	2a e0       	ldi	r18, 0x0A	; 10
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	ae 01       	movw	r20, r28
 434:	4f 5f       	subi	r20, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	0e 94 29 0b 	call	0x1652	; 0x1652 <__ultoa_invert>
 43c:	48 2e       	mov	r4, r24
 43e:	4c 85       	ldd	r20, Y+12	; 0x0c
 440:	44 1a       	sub	r4, r20
 442:	4a c0       	rjmp	.+148    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 444:	85 37       	cpi	r24, 0x75	; 117
 446:	29 f4       	brne	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 448:	1f 7e       	andi	r17, 0xEF	; 239
 44a:	a1 2e       	mov	r10, r17
 44c:	2a e0       	ldi	r18, 0x0A	; 10
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	25 c0       	rjmp	.+74     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 452:	51 2f       	mov	r21, r17
 454:	59 7f       	andi	r21, 0xF9	; 249
 456:	a5 2e       	mov	r10, r21
 458:	8f 36       	cpi	r24, 0x6F	; 111
 45a:	c1 f0       	breq	.+48     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 45c:	18 f4       	brcc	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45e:	88 35       	cpi	r24, 0x58	; 88
 460:	79 f0       	breq	.+30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 462:	bd c0       	rjmp	.+378    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 464:	80 37       	cpi	r24, 0x70	; 112
 466:	19 f0       	breq	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	88 37       	cpi	r24, 0x78	; 120
 46a:	21 f0       	breq	.+8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 46c:	b8 c0       	rjmp	.+368    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 46e:	85 2f       	mov	r24, r21
 470:	80 61       	ori	r24, 0x10	; 16
 472:	a8 2e       	mov	r10, r24
 474:	a4 fe       	sbrs	r10, 4
 476:	0d c0       	rjmp	.+26     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 478:	9a 2d       	mov	r25, r10
 47a:	94 60       	ori	r25, 0x04	; 4
 47c:	a9 2e       	mov	r10, r25
 47e:	09 c0       	rjmp	.+18     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 480:	14 ff       	sbrs	r17, 4
 482:	0a c0       	rjmp	.+20     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 484:	a5 2f       	mov	r26, r21
 486:	a6 60       	ori	r26, 0x06	; 6
 488:	aa 2e       	mov	r10, r26
 48a:	06 c0       	rjmp	.+12     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 48c:	28 e0       	ldi	r18, 0x08	; 8
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	05 c0       	rjmp	.+10     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 492:	20 e1       	ldi	r18, 0x10	; 16
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	20 e1       	ldi	r18, 0x10	; 16
 49a:	32 e0       	ldi	r19, 0x02	; 2
 49c:	f7 01       	movw	r30, r14
 49e:	a7 fe       	sbrs	r10, 7
 4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4a2:	60 81       	ld	r22, Z
 4a4:	71 81       	ldd	r23, Z+1	; 0x01
 4a6:	82 81       	ldd	r24, Z+2	; 0x02
 4a8:	93 81       	ldd	r25, Z+3	; 0x03
 4aa:	a7 01       	movw	r20, r14
 4ac:	4c 5f       	subi	r20, 0xFC	; 252
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4b2:	60 81       	ld	r22, Z
 4b4:	71 81       	ldd	r23, Z+1	; 0x01
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a7 01       	movw	r20, r14
 4bc:	4e 5f       	subi	r20, 0xFE	; 254
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	7a 01       	movw	r14, r20
 4c2:	ae 01       	movw	r20, r28
 4c4:	4f 5f       	subi	r20, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	0e 94 29 0b 	call	0x1652	; 0x1652 <__ultoa_invert>
 4cc:	48 2e       	mov	r4, r24
 4ce:	5c 85       	ldd	r21, Y+12	; 0x0c
 4d0:	45 1a       	sub	r4, r21
 4d2:	8a 2d       	mov	r24, r10
 4d4:	8f 77       	andi	r24, 0x7F	; 127
 4d6:	38 2e       	mov	r3, r24
 4d8:	36 fe       	sbrs	r3, 6
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4dc:	93 2d       	mov	r25, r3
 4de:	9e 7f       	andi	r25, 0xFE	; 254
 4e0:	a9 2e       	mov	r10, r25
 4e2:	4b 14       	cp	r4, r11
 4e4:	58 f4       	brcc	.+22     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4e6:	34 fe       	sbrs	r3, 4
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4ea:	32 fc       	sbrc	r3, 2
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4ee:	a3 2d       	mov	r26, r3
 4f0:	ae 7e       	andi	r26, 0xEE	; 238
 4f2:	aa 2e       	mov	r10, r26
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4f6:	14 2d       	mov	r17, r4
 4f8:	a3 2c       	mov	r10, r3
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4fc:	14 2d       	mov	r17, r4
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 500:	1b 2d       	mov	r17, r11
 502:	a4 fe       	sbrs	r10, 4
 504:	0e c0       	rjmp	.+28     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 506:	fe 01       	movw	r30, r28
 508:	e4 0d       	add	r30, r4
 50a:	f1 1d       	adc	r31, r1
 50c:	80 81       	ld	r24, Z
 50e:	80 33       	cpi	r24, 0x30	; 48
 510:	21 f4       	brne	.+8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 512:	ea 2d       	mov	r30, r10
 514:	e9 7e       	andi	r30, 0xE9	; 233
 516:	ae 2e       	mov	r10, r30
 518:	08 c0       	rjmp	.+16     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 51a:	a2 fe       	sbrs	r10, 2
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 51e:	1e 5f       	subi	r17, 0xFE	; 254
 520:	04 c0       	rjmp	.+8      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 522:	8a 2d       	mov	r24, r10
 524:	86 78       	andi	r24, 0x86	; 134
 526:	09 f0       	breq	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 528:	1f 5f       	subi	r17, 0xFF	; 255
 52a:	a3 fc       	sbrc	r10, 3
 52c:	11 c0       	rjmp	.+34     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 52e:	a0 fe       	sbrs	r10, 0
 530:	06 c0       	rjmp	.+12     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 532:	10 17       	cp	r17, r16
 534:	88 f4       	brcc	.+34     	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 536:	04 0d       	add	r16, r4
 538:	b0 2e       	mov	r11, r16
 53a:	b1 1a       	sub	r11, r17
 53c:	0e c0       	rjmp	.+28     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 53e:	10 17       	cp	r17, r16
 540:	60 f4       	brcc	.+24     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 542:	b6 01       	movw	r22, r12
 544:	80 e2       	ldi	r24, 0x20	; 32
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 54c:	1f 5f       	subi	r17, 0xFF	; 255
 54e:	f7 cf       	rjmp	.-18     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 550:	10 17       	cp	r17, r16
 552:	18 f4       	brcc	.+6      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 554:	01 1b       	sub	r16, r17
 556:	02 c0       	rjmp	.+4      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 558:	b4 2c       	mov	r11, r4
 55a:	00 e0       	ldi	r16, 0x00	; 0
 55c:	a4 fe       	sbrs	r10, 4
 55e:	10 c0       	rjmp	.+32     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 560:	b6 01       	movw	r22, r12
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 56a:	a2 fe       	sbrs	r10, 2
 56c:	17 c0       	rjmp	.+46     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 56e:	a1 fc       	sbrc	r10, 1
 570:	03 c0       	rjmp	.+6      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 572:	88 e7       	ldi	r24, 0x78	; 120
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 578:	88 e5       	ldi	r24, 0x58	; 88
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	b6 01       	movw	r22, r12
 57e:	0c c0       	rjmp	.+24     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 580:	8a 2d       	mov	r24, r10
 582:	86 78       	andi	r24, 0x86	; 134
 584:	59 f0       	breq	.+22     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 586:	a1 fe       	sbrs	r10, 1
 588:	02 c0       	rjmp	.+4      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 58a:	8b e2       	ldi	r24, 0x2B	; 43
 58c:	01 c0       	rjmp	.+2      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	a7 fc       	sbrc	r10, 7
 592:	8d e2       	ldi	r24, 0x2D	; 45
 594:	b6 01       	movw	r22, r12
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 59c:	4b 14       	cp	r4, r11
 59e:	38 f4       	brcc	.+14     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5a0:	b6 01       	movw	r22, r12
 5a2:	80 e3       	ldi	r24, 0x30	; 48
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 5aa:	ba 94       	dec	r11
 5ac:	f7 cf       	rjmp	.-18     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 5ae:	4a 94       	dec	r4
 5b0:	e1 e0       	ldi	r30, 0x01	; 1
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	ec 0f       	add	r30, r28
 5b6:	fd 1f       	adc	r31, r29
 5b8:	e4 0d       	add	r30, r4
 5ba:	f1 1d       	adc	r31, r1
 5bc:	80 81       	ld	r24, Z
 5be:	b6 01       	movw	r22, r12
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 5c6:	41 10       	cpse	r4, r1
 5c8:	f2 cf       	rjmp	.-28     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5ca:	00 23       	and	r16, r16
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 5ce:	30 ce       	rjmp	.-928    	; 0x230 <vfprintf+0x5e>
 5d0:	b6 01       	movw	r22, r12
 5d2:	80 e2       	ldi	r24, 0x20	; 32
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fputc>
 5da:	01 50       	subi	r16, 0x01	; 1
 5dc:	f6 cf       	rjmp	.-20     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5de:	f6 01       	movw	r30, r12
 5e0:	87 81       	ldd	r24, Z+7	; 0x07
 5e2:	90 85       	ldd	r25, Z+8	; 0x08
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	62 96       	adiw	r28, 0x12	; 18
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
 606:	bf 90       	pop	r11
 608:	af 90       	pop	r10
 60a:	9f 90       	pop	r9
 60c:	8f 90       	pop	r8
 60e:	7f 90       	pop	r7
 610:	6f 90       	pop	r6
 612:	4f 90       	pop	r4
 614:	3f 90       	pop	r3
 616:	2f 90       	pop	r2
 618:	08 95       	ret

Disassembly of section .text.avrlibc:

00001fde <strnlen>:
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	6b 01       	movw	r12, r22
    1fe6:	e8 2e       	mov	r14, r24
    1fe8:	a8 2f       	mov	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	41 15       	cp	r20, r1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	31 f4       	brne	.+12     	; 0x1ffe <strnlen+0x20>
    1ff2:	8c 19       	sub	r24, r12
    1ff4:	9d 09       	sbc	r25, r13
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	08 95       	ret
    1ffe:	fc 01       	movw	r30, r24
    2000:	24 91       	lpm	r18, Z
    2002:	a7 fd       	sbrc	r26, 7
    2004:	20 81       	ld	r18, Z
    2006:	22 23       	and	r18, r18
    2008:	a1 f3       	breq	.-24     	; 0x1ff2 <strnlen+0x14>
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	a1 1d       	adc	r26, r1
    200e:	41 50       	subi	r20, 0x01	; 1
    2010:	51 09       	sbc	r21, r1
    2012:	ec cf       	rjmp	.-40     	; 0x1fec <strnlen+0xe>

Disassembly of section .text.avrlibc:

00001a08 <fputc>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	fb 01       	movw	r30, r22
    1a12:	24 81       	ldd	r18, Z+4	; 0x04
    1a14:	21 fd       	sbrc	r18, 1
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <fputc+0x16>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	9f ef       	ldi	r25, 0xFF	; 255
    1a1c:	2c c0       	rjmp	.+88     	; 0x1a76 <fputc+0x6e>
    1a1e:	22 ff       	sbrs	r18, 2
    1a20:	16 c0       	rjmp	.+44     	; 0x1a4e <fputc+0x46>
    1a22:	47 81       	ldd	r20, Z+7	; 0x07
    1a24:	50 85       	ldd	r21, Z+8	; 0x08
    1a26:	25 81       	ldd	r18, Z+5	; 0x05
    1a28:	36 81       	ldd	r19, Z+6	; 0x06
    1a2a:	42 17       	cp	r20, r18
    1a2c:	53 07       	cpc	r21, r19
    1a2e:	44 f4       	brge	.+16     	; 0x1a40 <fputc+0x38>
    1a30:	a0 81       	ld	r26, Z
    1a32:	b1 81       	ldd	r27, Z+1	; 0x01
    1a34:	9d 01       	movw	r18, r26
    1a36:	2f 5f       	subi	r18, 0xFF	; 255
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	31 83       	std	Z+1, r19	; 0x01
    1a3c:	20 83       	st	Z, r18
    1a3e:	8c 93       	st	X, r24
    1a40:	27 81       	ldd	r18, Z+7	; 0x07
    1a42:	30 85       	ldd	r19, Z+8	; 0x08
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	30 87       	std	Z+8, r19	; 0x08
    1a4a:	27 83       	std	Z+7, r18	; 0x07
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <fputc+0x6e>
    1a4e:	8b 01       	movw	r16, r22
    1a50:	ec 01       	movw	r28, r24
    1a52:	fb 01       	movw	r30, r22
    1a54:	01 84       	ldd	r0, Z+9	; 0x09
    1a56:	f2 85       	ldd	r31, Z+10	; 0x0a
    1a58:	e0 2d       	mov	r30, r0
    1a5a:	09 95       	icall
    1a5c:	89 2b       	or	r24, r25
    1a5e:	e1 f6       	brne	.-72     	; 0x1a18 <fputc+0x10>
    1a60:	d8 01       	movw	r26, r16
    1a62:	17 96       	adiw	r26, 0x07	; 7
    1a64:	8d 91       	ld	r24, X+
    1a66:	9c 91       	ld	r25, X
    1a68:	18 97       	sbiw	r26, 0x08	; 8
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	18 96       	adiw	r26, 0x08	; 8
    1a6e:	9c 93       	st	X, r25
    1a70:	8e 93       	st	-X, r24
    1a72:	17 97       	sbiw	r26, 0x07	; 7
    1a74:	ce 01       	movw	r24, r28
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

Disassembly of section .text.avrlibc:

00001652 <__ultoa_invert>:
    1652:	fa 01       	movw	r30, r20
    1654:	aa 27       	eor	r26, r26
    1656:	28 30       	cpi	r18, 0x08	; 8
    1658:	51 f1       	breq	.+84     	; 0x16ae <__ultoa_invert+0x5c>
    165a:	20 31       	cpi	r18, 0x10	; 16
    165c:	81 f1       	breq	.+96     	; 0x16be <__ultoa_invert+0x6c>
    165e:	e8 94       	clt
    1660:	6f 93       	push	r22
    1662:	6e 7f       	andi	r22, 0xFE	; 254
    1664:	6e 5f       	subi	r22, 0xFE	; 254
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	af 4f       	sbci	r26, 0xFF	; 255
    166e:	b1 e0       	ldi	r27, 0x01	; 1
    1670:	3e d0       	rcall	.+124    	; 0x16ee <__ultoa_invert+0x9c>
    1672:	b4 e0       	ldi	r27, 0x04	; 4
    1674:	3c d0       	rcall	.+120    	; 0x16ee <__ultoa_invert+0x9c>
    1676:	67 0f       	add	r22, r23
    1678:	78 1f       	adc	r23, r24
    167a:	89 1f       	adc	r24, r25
    167c:	9a 1f       	adc	r25, r26
    167e:	a1 1d       	adc	r26, r1
    1680:	68 0f       	add	r22, r24
    1682:	79 1f       	adc	r23, r25
    1684:	8a 1f       	adc	r24, r26
    1686:	91 1d       	adc	r25, r1
    1688:	a1 1d       	adc	r26, r1
    168a:	6a 0f       	add	r22, r26
    168c:	71 1d       	adc	r23, r1
    168e:	81 1d       	adc	r24, r1
    1690:	91 1d       	adc	r25, r1
    1692:	a1 1d       	adc	r26, r1
    1694:	20 d0       	rcall	.+64     	; 0x16d6 <__ultoa_invert+0x84>
    1696:	09 f4       	brne	.+2      	; 0x169a <__ultoa_invert+0x48>
    1698:	68 94       	set
    169a:	3f 91       	pop	r19
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	26 9f       	mul	r18, r22
    16a0:	11 24       	eor	r1, r1
    16a2:	30 19       	sub	r19, r0
    16a4:	30 5d       	subi	r19, 0xD0	; 208
    16a6:	31 93       	st	Z+, r19
    16a8:	de f6       	brtc	.-74     	; 0x1660 <__ultoa_invert+0xe>
    16aa:	cf 01       	movw	r24, r30
    16ac:	08 95       	ret
    16ae:	46 2f       	mov	r20, r22
    16b0:	47 70       	andi	r20, 0x07	; 7
    16b2:	40 5d       	subi	r20, 0xD0	; 208
    16b4:	41 93       	st	Z+, r20
    16b6:	b3 e0       	ldi	r27, 0x03	; 3
    16b8:	0f d0       	rcall	.+30     	; 0x16d8 <__ultoa_invert+0x86>
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__ultoa_invert+0x5c>
    16bc:	f6 cf       	rjmp	.-20     	; 0x16aa <__ultoa_invert+0x58>
    16be:	46 2f       	mov	r20, r22
    16c0:	4f 70       	andi	r20, 0x0F	; 15
    16c2:	40 5d       	subi	r20, 0xD0	; 208
    16c4:	4a 33       	cpi	r20, 0x3A	; 58
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <__ultoa_invert+0x7c>
    16c8:	49 5d       	subi	r20, 0xD9	; 217
    16ca:	31 fd       	sbrc	r19, 1
    16cc:	40 52       	subi	r20, 0x20	; 32
    16ce:	41 93       	st	Z+, r20
    16d0:	02 d0       	rcall	.+4      	; 0x16d6 <__ultoa_invert+0x84>
    16d2:	a9 f7       	brne	.-22     	; 0x16be <__ultoa_invert+0x6c>
    16d4:	ea cf       	rjmp	.-44     	; 0x16aa <__ultoa_invert+0x58>
    16d6:	b4 e0       	ldi	r27, 0x04	; 4
    16d8:	a6 95       	lsr	r26
    16da:	97 95       	ror	r25
    16dc:	87 95       	ror	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0x86>
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 05       	cpc	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	08 95       	ret
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	0a 2e       	mov	r0, r26
    16f4:	06 94       	lsr	r0
    16f6:	57 95       	ror	r21
    16f8:	47 95       	ror	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	ba 95       	dec	r27
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__ultoa_invert+0xa2>
    1702:	62 0f       	add	r22, r18
    1704:	73 1f       	adc	r23, r19
    1706:	84 1f       	adc	r24, r20
    1708:	95 1f       	adc	r25, r21
    170a:	a0 1d       	adc	r26, r0
    170c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00001f70 <__prologue_saves__>:
    1f70:	2f 92       	push	r2
    1f72:	3f 92       	push	r3
    1f74:	4f 92       	push	r4
    1f76:	5f 92       	push	r5
    1f78:	6f 92       	push	r6
    1f7a:	7f 92       	push	r7
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	ca 1b       	sub	r28, r26
    1f9a:	db 0b       	sbc	r29, r27
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002014 <__epilogue_restores__>:
    2014:	2a 88       	ldd	r2, Y+18	; 0x12
    2016:	39 88       	ldd	r3, Y+17	; 0x11
    2018:	48 88       	ldd	r4, Y+16	; 0x10
    201a:	5f 84       	ldd	r5, Y+15	; 0x0f
    201c:	6e 84       	ldd	r6, Y+14	; 0x0e
    201e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2020:	8c 84       	ldd	r8, Y+12	; 0x0c
    2022:	9b 84       	ldd	r9, Y+11	; 0x0b
    2024:	aa 84       	ldd	r10, Y+10	; 0x0a
    2026:	b9 84       	ldd	r11, Y+9	; 0x09
    2028:	c8 84       	ldd	r12, Y+8	; 0x08
    202a:	df 80       	ldd	r13, Y+7	; 0x07
    202c:	ee 80       	ldd	r14, Y+6	; 0x06
    202e:	fd 80       	ldd	r15, Y+5	; 0x05
    2030:	0c 81       	ldd	r16, Y+4	; 0x04
    2032:	1b 81       	ldd	r17, Y+3	; 0x03
    2034:	aa 81       	ldd	r26, Y+2	; 0x02
    2036:	b9 81       	ldd	r27, Y+1	; 0x01
    2038:	ce 0f       	add	r28, r30
    203a:	d1 1d       	adc	r29, r1
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	ed 01       	movw	r28, r26
    2048:	08 95       	ret
